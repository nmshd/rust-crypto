// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import '../common.dart';
import 'config.dart';
import 'crypto/algorithms/encryption.dart';
import 'crypto/algorithms/hashes.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Returns a provider which supports the given requirements and is initializable.
///
/// This function returns the first provider, which supports the given requirements (see [`ProviderConfig`])
/// and can be initialized on the target platform with the given [`ProviderImplConfig`].
///
/// ### Example
/// ```
/// # use std::collections::HashSet;
/// # use crypto_layer::prelude::*;
///
/// let platform_specific_provider_config = ProviderImplConfig{additional_config: vec![]};
/// let required_capabilities = ProviderConfig {
///     min_security_level: SecurityLevel::Software,
///     max_security_level: SecurityLevel::Hardware,
///     supported_asym_spec: HashSet::new(),
///     supported_ciphers: HashSet::new(),
///     supported_hashes: HashSet::new(),
/// };
///
/// let provider_option: Option<Provider> = create_provider(&required_capabilities, platform_specific_provider_config);
/// ```
Future<Provider?> createProvider({
  required ProviderConfig conf,
  required ProviderImplConfig implConf,
}) => RustLib.instance.api.cryptoLayerCommonFactoryCreateProvider(
  conf: conf,
  implConf: implConf,
);

/// Returns the provider matching the given name.
///
/// Returns `None` if the provider requested is not available on the target platform or it is not initializable.
///
/// A providers name is a hardcoded string unique to a provider (see [`Provider::provider_name()`](crate::prelude::Provider::provider_name)
/// and [`get_all_providers()`](crate::prelude::get_all_providers)).
Future<Provider?> createProviderFromName({
  required String name,
  required ProviderImplConfig implConf,
}) => RustLib.instance.api.cryptoLayerCommonFactoryCreateProviderFromName(
  name: name,
  implConf: implConf,
);

/// Returns the names of all available providers.
///
/// A provider is available if it is initializable on the target platform.
Future<List<String>> getAllProviders() =>
    RustLib.instance.api.cryptoLayerCommonFactoryGetAllProviders();

/// Returns the names and capabilities of all providers that can be initialized with the given [ProviderImplConfig] on the target platform.
Future<List<(String, ProviderConfig)>> getProviderCapabilities({
  required ProviderImplConfig implConfig,
}) => RustLib.instance.api.cryptoLayerCommonFactoryGetProviderCapabilities(
  implConfig: implConfig,
);
