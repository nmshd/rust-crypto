var searchIndex = new Map(JSON.parse('[\
["crypto_layer",{"doc":"","t":"EECCCCCCPPPGPCNNNNNNNNNNNCNNNNPPPPPPPPPGNNNNCNNNCNNNNNNNPGGPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPGPPPPPPPGGPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPPPPPPPPGPPGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPGPPPPPPPPPPPPPPPPPPPPPPGGPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPGPPPNNNNNNNNNNNNNNFGPNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCKNNNNKMKMMMKMFCNNNNNCNNNONOONNNONNNNCCCFNNNNNNNNNNNPFGPNNNNNNNNNNNONNONNNNONNNNNNNOOOFFNNNNNNNNNNNNNNNOCNNNNNNNCNONNNNNNNOCCPPPKGPNNNMNNNNNNNNNNNPGPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["SecModules","SecurityModuleError","common","tpm","crypto","error","factory","traits","ClientAuth","CreateX509","Decrypt","KeyUsage","SignEncrypt","algorithms","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","lookup","lookup","pkcs","to_owned","try_from","try_into","type_id","Bits1024","Bits128","Bits192","Bits2048","Bits256","Bits3072","Bits4096","Bits512","Bits8192","KeyBits","borrow","borrow_mut","clone","clone_into","encryption","fmt","from","from","hashes","into","lookup","lookup","to_owned","try_from","try_into","type_id","Aes","AsymmetricEncryption","BlockCiphers","BrainpoolP256r1","BrainpoolP384r1","BrainpoolP512r1","BrainpoolP638","Camellia","Cbc","Ccm","Cfb","Chacha20","Ctr","Curve25519","Curve448","Des","EcDaa","EcDh","EcDsa","EcMqv","EcSchnorr","Ecb","Ecc","EccCurves","EccSchemeAlgorithm","Frp256v1","Gcm","Null","Ofb","P256","P384","P521","Rc2","Rc2KeyBits","Rc2_128","Rc2_40","Rc2_64","Rc4","Rsa","Secp256k1","Sm2","StreamCiphers","SymmetricMode","Tdes2","Tdes3","TripleDes","TripleDesNumKeys","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","deserialize","deserialize","ecc_curve","ecc_scheme","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","into","into","into","into","into","into","into","into","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","rsa_key_bits","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Hash","Md2","Md4","Md5","Ripemd160","Sha1","Sha2","Sha224","Sha256","Sha2Bits","Sha3","Sha384","Sha3Bits","Sha3_224","Sha3_256","Sha3_384","Sha3_512","Sha512","Sha512_224","Sha512_256","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","from","from","from","from","from","into","into","into","lookup","lookup","lookup","lookup","lookup","lookup","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","standards","Aes128Cbc","Aes128Gcm","Aes192Cbc","Aes192Gcm","Aes256Cbc","Aes256Gcm","BasicConstraints","Certificate","CertificateRevocationList","CertificateSigningRequest","ClientAuth","CodeSigning","DhPublicNumber","DocumentSigning","EcPublicKey","EcdhSpecifiedCurves","EcdhStandardCurves","EcdsaWithSha1","EcdsaWithSha256","EcdsaWithSha384","EcdsaWithSha512","EmailProtection","ExtendedKeyUsage","IdRsaSsaPss","IdSha1","IdSha256","IdSha384","IdSha512","KeyUsage","ObjectIdentifiers","OcspSigning","Oid","OidType","Pem","Pkcs","Pkcs1","Pkcs10","Pkcs11","Pkcs12","Pkcs3","Pkcs5","Pkcs7","Pkcs7Data","Pkcs7DigestData","Pkcs7EncryptedData","Pkcs7EnvelopedData","Pkcs7SignedAndEnvelopedData","Pkcs7SignedData","Pkcs8","Pkcs9","Pkcs9ContentType","Pkcs9EmailAddress","Pkcs9MessageDigest","Pkcs9SigningTime","Pkcs9UnstructuredName","PkcsType","PkiStandards","Pkix","RsaEncryption","ServerAuth","Sha1WithRsaEncryption","Sha256WithRsaEncryption","Sha384WithRsaEncryption","Sha512WithRsaEncryption","SubjectAltName","SubjectKeyIdentifier","TimeStamping","X509","X509Type","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","lookup","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","CreationError","DecryptionError","EncryptionError","InitializationError","SecurityModuleError","SignatureVerificationError","SigningError","Tpm","borrow","borrow_mut","fmt","fmt","from","from","into","lookup","lookup","source","to_string","try_from","try_into","type_id","SecModules","SecurityModule","Tpm","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","from","get_instance","hash","into","into","lookup","lookup","lookup","lookup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","key_handle","log_config","module_provider","module_provider_config","KeyHandle","decrypt_data","encrypt_data","sign_data","verify_signature","LogConfig","setup_logging","Provider","create_key","initialize_module","load_key","ProviderConfig","as_any","TpmConfig","android","as_any","borrow","borrow_mut","clone","clone_into","core","default","fmt","from","hash","into","key_algorithm","key_usages","lookup","lookup","new","sym_algorithm","to_owned","try_from","try_into","type_id","android_logger","config","knox","DefaultAndroidLogger","borrow","borrow_mut","fmt","from","into","lookup","lookup","setup_logging","try_from","try_into","type_id","ASym","AndroidConfig","EncryptionMode","Sym","as_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","hardware_backed","into","into","key_usages","lookup","lookup","lookup","lookup","mode","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vm","algo","digest","KnoxConfig","KnoxProvider","as_any","borrow","borrow","borrow_mut","borrow_mut","create_key","decrypt_data","encrypt_data","fmt","fmt","from","from","initialize_module","into","into","key_algorithm","key_handle","load_key","lookup","lookup","lookup","lookup","new","new","provider","sign_data","sym_algorithm","try_from","try_from","try_into","try_into","type_id","type_id","verify_signature","vm","error","instance","InitializationError","InternalError","Io","ToTpmError","TpmError","UnsupportedOperation","borrow","borrow_mut","description","err_internal","fmt","fmt","from","into","lookup","lookup","source","to_string","try_from","try_into","type_id","Android","AndroidTpmType","Keystore","Knox","None","TpmInstance","TpmType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_instance","default","eq","eq","fmt","fmt","from","from","from","from","hash","hash","into","into","into","lookup","lookup","lookup","lookup","lookup","lookup","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"crypto_layer"],[4,"crypto_layer::common"],[8,"crypto_layer::common::crypto"],[30,"crypto_layer::common::crypto::algorithms"],[56,"crypto_layer::common::crypto::algorithms::encryption"],[222,"crypto_layer::common::crypto::algorithms::hashes"],[284,"crypto_layer::common::crypto::pkcs"],[285,"crypto_layer::common::crypto::pkcs::standards"],[400,"crypto_layer::common::error"],[422,"crypto_layer::common::factory"],[451,"crypto_layer::common::traits"],[455,"crypto_layer::common::traits::key_handle"],[460,"crypto_layer::common::traits::log_config"],[462,"crypto_layer::common::traits::module_provider"],[466,"crypto_layer::common::traits::module_provider_config"],[468,"crypto_layer::tpm"],[491,"crypto_layer::tpm::android"],[494,"crypto_layer::tpm::android::android_logger"],[506,"crypto_layer::tpm::android::config"],[538,"crypto_layer::tpm::android::config::EncryptionMode"],[540,"crypto_layer::tpm::android::knox"],[577,"crypto_layer::tpm::core"],[579,"crypto_layer::tpm::core::error"],[600,"crypto_layer::tpm::core::instance"],[649,"core::fmt"],[650,"core::fmt"],[651,"jni::wrapper::jnienv"],[652,"jni::wrapper::errors"],[653,"core::result"],[654,"jni::wrapper::jnienv"],[655,"serde::de"],[656,"core::option"],[657,"serde::ser"],[658,"core::error"],[659,"alloc::string"],[660,"alloc::boxed"],[661,"std::sync::mutex"],[662,"alloc::sync"],[663,"alloc::vec"],[664,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Represents the bit length of a cryptographic key.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","AES (Advanced Encryption Standard) block cipher with …","Represents the available encryption algorithms.","Represents the available block cipher algorithms.","Brainpool P256r1 curve.","Brainpool P384r1 curve.","Brainpool P512r1 curve.","Brainpool P638 curve.","Camellia block cipher with selectable key sizes.","AES in Cipher Block Chaining (CBC) mode. CBC mode …","AES in Counter with CBC-MAC (CCM) mode with selectable key …","AES in Cipher Feedback (CFB) mode. CFB mode turns AES into …","ChaCha20 stream cipher.","AES in Counter (CTR) mode. CTR mode encrypts a sequence of …","Curve25519, popular for its security and performance.","Curve448, known for high security and efficiency.","DES (Data Encryption Standard) block cipher, now …","ECDAA: Elliptic Curve Direct Anonymous Attestation.","ECDH: Elliptic Curve Diffie-Hellman for key agreement.","ECDSA: Elliptic Curve Digital Signature Algorithm.","ECMQV: Elliptic Curve Menezes-Qu-Vanstone, a key agreement …","EC-Schnorr: A Schnorr signature scheme variant using …","AES in Electronic Codebook (ECB) mode. ECB encrypts each …","Represents Elliptic Curve Cryptography (ECC) encryption.","Specifies the curve types for Elliptic Curve Digital …","Enum representing the ECC scheme interface type.","FRP256v1, a French curve providing strong security and …","AES in Galois/Counter Mode (GCM) with selectable key sizes.","Null: A placeholder or default value indicating no ECC …","AES in Output Feedback (OFB) mode. OFB mode also converts …","NIST P-256 curve.","NIST P-384 curve.","NIST P-521 curve.","RC2 block cipher with selectable key sizes.","Specifies the key sizes for the RC2 block cipher.","RC2 with a 128-bit key, offering the highest level of …","RC2 with a 40-bit key.","RC2 with a 64-bit key.","RC4 stream cipher.","RSA encryption with selectable key sizes.","secp256k1 curve, commonly used in blockchain technologies.","SM2: A Chinese cryptographic standard for digital …","Represents the available stream cipher algorithms.","Specifies the modes of operation for symmetric block …","Two-key Triple DES, using two different keys for …","Three-key Triple DES, providing enhanced security with …","Triple DES block cipher, either in two-key or three-key …","Specifies the number of keys used in Triple DES …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the elliptic curve used if the asymmetric …","Retrieves the ECC scheme algorithm if the asymmetric …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Retrieves the RSA key size if the asymmetric encryption …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents the available hashing algorithms.","MD2 hashing algorithm.","MD4 hashing algorithm.","MD5 hashing algorithm.","RIPEMD-160 hashing algorithm.","SHA-1 hashing algorithm.","SHA-2 family of hashing algorithms with selectable digest …","224-bit digest size.","256-bit digest size, commonly used for its balance of …","Specifies the digest sizes for the SHA-2 family of hashing …","SHA-3 family of hashing algorithms, also known as Keccak, …","384-bit digest size.","Specifies the digest sizes for the SHA-3 family of hashing …","224-bit digest size for SHA-3.","256-bit digest size for SHA-3","384-bit digest size for SHA-3","512-bit digest size for SHA-3","512-bit digest size, offering high security for sensitive …","224-bit digest size variant of SHA-512, designed for …","256-bit digest size variant of SHA-512, optimized for …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an X.509 certificate.","Represents an X.509 Certificate Revocation List (CRL).","Represents an X.509 Certificate Signing Request (CSR).","","","","","","","","","","","","","","","","","","","","Represents the collection of Object Identifiers (OIDs) …","","Container for various cryptographic Object Identifiers …","Enumerates specific Object Identifier (OID) types across …","PEM (Privacy-Enhanced Mail) format for storing and sending …","PKCS (Public-Key Cryptography Standards) related …","RSA Cryptography Standard.","Certification Request Syntax Standard.","Cryptographic Token Interface (Cryptoki).","Personal Information Exchange Syntax Standard.","Diffie-Hellman Key Agreement Standard.","Password-Based Cryptography Standard.","Cryptographic Message Syntax Standard.","","","","","","","Private-Key Information Syntax Standard.","Selected Attribute Types.","","","","","","Enumerates the PKCS (Public-Key Cryptography Standards) …","Represents the various Public Key Infrastructure (PKI) …","","","","","","","","","","","X.509 related operations, including certificates and …","Enumerates the types within the X.509 standard.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Error that occurred during the key generation operation.","Error that occurred during the decryption operation.","Error that occurred during the encryption operation.","Error that occurs during the initialization process.","Represents errors that can occur within a security module.","Error that occurred during the signature verification …","Error that occurred during the signing operation.","Error originating from a Trusted Platform Module (TPM).","","","","Provides a human-readable description of the security …","Returns the argument unchanged.","Converts a <code>TpmError</code> into a <code>SecurityModuleError</code>.","Calls <code>U::from(self)</code>.","","","Provides the source of the security module error, if …","","","","","A container struct for security module-related …","Represents the available types of security modules in the …","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Retrieves or creates an instance of a security module …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Defines a common interface for cryptographic key …","Decrypts the given encrypted data using the cryptographic …","Encrypts the given data using the cryptographic key.","Signs the given data using the cryptographic key.","Verifies the signature of the given data using the …","Defines the interface for configuration data used by the …","","Defines the interface for a security module provider.","Creates a new cryptographic key identified by <code>key_id</code>.","Initializes the security module and returns a handle for …","Loads an existing cryptographic key identified by <code>key_id</code>.","Defines the interface for configuration data used by the …","Returns a reference to the underlying <code>Any</code> type.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A struct defining the needed values for the create_key() …","A TPM-based cryptographic provider for managing …","","","","","","Creates a new cryptographic key identified by <code>key_id</code>.","Decrypts the data with the currently loaded key. The …","Encrypts the data with the currently loaded key. The …","","","Returns the argument unchanged.","Returns the argument unchanged.","This function ordinarily initialises the HSM. For our …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Loads an existing cryptographic key identified by <code>key_id</code>.","","","","","Constructs a new <code>TpmProvider</code>.","creates a new KnoxConfig At any time, either a …","","Signs data using the previously loaded cryptographic key.","","","","","","","","Verifies a signature against the provided data.","","","","Error occurring during TPM initialization, containing an …","Error indicating that an internal error occured, possibly …","Error related to I/O operations, wrapping a <code>std::io::Error</code>.","A trait to allow ergonomic conversions to TpmError","Represents errors that can occur when interacting with a …","Error indicating that an attempted operation is …","","","Provides a human-readable description of the TPM error.","Wrap any error in TpmError::InternalError the wrapped …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Represents the TPM environment on Android platforms, with …","Enumerates the types of TPM available on Android platforms.","Android Provider using the Android Keystore API","Represents the Samsung Knox security platform with TPM …","Represents an unsupported or unknown TPM environment.","Manages instances of TPM providers based on the specified …","Represents the different environments where a Trusted …","","","","","","","","","","","Creates a new TPM provider instance based on the specified …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,13,13,13,13,13,13,13,13,13,0,13,13,13,13,0,13,13,13,0,13,13,13,13,13,13,13,18,0,0,17,17,17,17,18,19,19,19,22,19,17,17,18,16,16,16,16,16,19,15,0,0,17,19,16,19,17,17,17,18,0,21,21,21,22,15,17,16,0,0,20,20,18,0,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,15,16,17,18,19,16,17,15,15,16,17,15,16,17,18,19,20,21,15,16,17,18,19,20,21,22,16,17,15,16,17,18,19,20,21,22,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,15,16,17,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,15,16,17,18,19,20,21,22,0,26,26,26,26,26,26,27,27,0,26,27,0,28,28,28,28,27,27,27,26,27,28,26,27,28,26,27,28,26,27,28,26,26,27,28,26,27,27,28,28,26,27,28,26,26,27,27,28,28,26,27,28,26,27,28,26,27,28,26,27,28,0,29,29,29,29,29,29,29,57,57,57,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,29,58,0,59,59,60,60,60,60,60,60,60,29,29,29,29,29,29,60,60,29,29,29,29,29,0,0,29,29,29,29,29,29,29,29,29,29,59,0,29,59,60,57,58,29,59,60,57,58,29,59,60,57,58,29,59,60,57,58,29,59,59,60,60,57,57,58,58,29,29,59,60,57,58,29,59,60,57,58,29,59,60,57,58,29,31,31,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,35,61,35,61,35,35,35,35,35,61,35,35,61,35,61,35,61,61,35,35,35,61,35,61,35,61,35,0,0,0,0,0,41,41,41,41,0,36,0,38,38,38,0,46,0,0,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,50,0,0,50,49,49,50,49,50,50,50,49,50,49,50,49,49,50,49,49,49,50,50,49,50,49,50,49,50,49,50,49,62,62,0,0,51,52,51,52,51,52,52,52,52,51,52,51,52,52,51,51,0,52,52,52,51,51,52,51,0,52,51,52,51,52,51,52,51,52,51,0,0,32,32,32,0,0,32,32,32,32,54,32,32,32,32,32,32,32,32,32,32,32,55,0,56,56,55,0,0,63,55,56,63,55,56,55,56,55,56,63,55,55,56,55,56,63,55,55,56,55,56,63,55,56,63,63,55,55,56,56,55,56,63,55,56,63,55,56,63,55,56],"f":"``````````````{ce{}{}}0{bb}{{ce}d{}{}}{{bb}f}{{bh}j}{cc{}}{{bc}dl}6{{cn}{{Ab{eA`}}}{}{}}{{cAd}{{Ab{eAf}}}{}{}}`8{c{{Ab{e}}}{}{}}0{cAh{}}``````````::{AjAj}9`{{Ajh}j}7{AlAj}`=56=443```````````````````````````````````````````````================{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{BlBl}{{ce}d{}{}}0000000{{}An}{{}B`}{{}Bb}{{}Bd}{{}Bf}{c{{Ab{B`}}}Bn}{c{{Ab{Bb}}}Bn}{An{{C`{Bb}}}}{An{{C`{B`}}}}{{B`B`}f}{{BbBb}f}{{Anh}j}{{B`h}j}{{Bbh}j}{{Bdh}j}{{Bfh}j}{{Bhh}j}{{Bjh}j}{cc{}}0000000{{B`c}dl}{{Bbc}dl}{ce{}{}}0000000{{cAd}{{Ab{eAf}}}{}{}}{{cn}{{Ab{eA`}}}{}{}}10101001010110{An{{C`{Aj}}}}{{B`c}AbCb}{{Bbc}AbCb}55555555{c{{Ab{e}}}{}{}}000000000000000{cAh{}}0000000````````````````````777777{CdCd}{CfCf}{ChCh}{{ce}d{}{}}00{{}Cd}{{Cdh}j}{{Cfh}j}{{Chh}j}{cc{}}0{AlCf}{AlCh}2{ce{}{}}00{{cn}{{Ab{eA`}}}{}{}}{{cAd}{{Ab{eAf}}}{}{}}1010222??????>>>``````````````````````````````````````````````````````````````````````{CjCl}333333333366666333332121212121{c{{Ab{e}}}{}{}}000000000{cAh{}}0000````````55{{Cnh}j}09{D`Cn}756{Cn{{C`{Db}}}}{cDd{}}554```9999{DfDf}{{ce}d{}{}}{{DfDf}f}{{Dfh}j}{cc{}}{ClDf}1{{DdDf{C`{{Dj{Dh}}}}}{{C`{{E`{{Dn{Dl}}}}}}}}{{Dfc}dl}{ce{}{}}0{{cn}{{Ab{eA`}}}{}{}}{{cAd}{{Ab{eAf}}}{}{}}012{c{{Ab{e}}}{}{}}000{cAh{}}0`````{{Eb{Ef{Ed}}}{{Ab{{Eh{Ed}}Cn}}}}00{{Eb{Ef{Ed}}{Ef{Ed}}}{{Ab{fCn}}}}`{Dhd}`{{DlCl{Dj{Ej}}}{{Ab{dCn}}}}{Dl{{Ab{dCn}}}}1`{ElEj}``{EnEj};;{EnEn}{{ce}d{}{}}`{{}En}{{Enh}j}{cc{}}`{ce{}{}}``{{cn}{{Ab{eA`}}}{}{}}{{cAd}{{Ab{eAf}}}{}{}}{{AnBdCd{Eh{b}}}{{Dj{El}}}}`3{c{{Ab{e}}}{}{}}0{cAh{}}````55{{F`h}j}7654{F`d}332````{FbEj}8888{FdFd}={{Fbh}j}{{Fdh}j}<<`;;`:9:9`;777766`````{FfEj}<<<<{{FhCl{Dj{Ej}}}{{Ab{dCn}}}}{{Fh{Ef{Ed}}}{{Ab{{Eh{Ed}}Cn}}}}0{{Fhh}j}{{Ffh}j}{cc{}}0{Fh{{Ab{dCn}}}}{ce{}{}}0``6{{cn}{{Ab{eA`}}}{}{}}{{cAd}{{Ab{eAf}}}{}{}}10{{}Fh}{{{C`{An}}{C`{Bd}}Fj}{{Ab{FfCn}}}}`9`{c{{Ab{e}}}{}{}}000{cAh{}}0{{Fh{Ef{Ed}}{Ef{Ed}}}{{Ab{fCn}}}}`````````77{D`Dd}{Fl{{Ab{cD`}}}{}}{{D`h}j}0<:98{D`{{C`{Db}}}}{cDd{}}776```````<<<<<<{FnFn}{G`G`}{{ce}d{}{}}0{{DdFn}{{E`{{Dn{Dl}}}}}}{{}Fn}{{FnFn}f}{{G`G`}f}{{Fnh}j}{{G`h}j}{cc{}}0{ClFn}1{{Fnc}dl}{{G`c}dl}{ce{}{}}00{{cAd}{{Ab{eAf}}}{}{}}{{cn}{{Ab{eA`}}}{}{}}101022{c{{Ab{e}}}{}{}}00000{cAh{}}00","c":[],"p":[[6,"KeyUsage",8],[1,"unit"],[1,"bool"],[5,"Formatter",649],[8,"Result",649],[10,"Hasher",650],[5,"JNIEnv",651],[6,"Error",652],[6,"Result",653],[5,"JNIEnv",651],[6,"Error",652],[5,"TypeId",654],[6,"KeyBits",30],[1,"u32"],[6,"AsymmetricEncryption",56],[6,"EccSchemeAlgorithm",56],[6,"EccCurves",56],[6,"BlockCiphers",56],[6,"SymmetricMode",56],[6,"TripleDesNumKeys",56],[6,"Rc2KeyBits",56],[6,"StreamCiphers",56],[10,"Deserializer",655],[6,"Option",656],[10,"Serializer",657],[6,"Hash",222],[6,"Sha2Bits",222],[6,"Sha3Bits",222],[6,"OidType",285],[1,"str"],[6,"SecurityModuleError",400],[6,"TpmError",579],[10,"Error",658],[5,"String",659],[6,"SecurityModule",422],[10,"LogConfig",460],[5,"Box",660],[10,"Provider",462],[5,"Mutex",661],[5,"Arc",662],[10,"KeyHandle",455],[1,"u8"],[1,"slice"],[5,"Vec",663],[10,"Any",654],[10,"ProviderConfig",466],[5,"TpmConfig",468],[5,"DefaultAndroidLogger",494],[5,"AndroidConfig",506],[6,"EncryptionMode",506],[5,"KnoxConfig",540],[5,"KnoxProvider",540],[5,"JavaVM",664],[10,"ToTpmError",579],[6,"TpmType",600],[6,"AndroidTpmType",600],[6,"X509Type",285],[6,"ObjectIdentifiers",285],[6,"PkiStandards",285],[6,"PkcsType",285],[5,"SecModules",422],[15,"ASym",538],[5,"TpmInstance",600]],"b":[[410,"impl-Debug-for-SecurityModuleError"],[411,"impl-Display-for-SecurityModuleError"],[589,"impl-Display-for-TpmError"],[590,"impl-Debug-for-TpmError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
