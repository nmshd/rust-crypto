// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AsymmetricKeySpec } from "./AsymmetricKeySpec";
import type { Cipher } from "./Cipher";
import type { CryptoHash } from "./CryptoHash";
import type { SecurityLevel } from "./SecurityLevel";

/**
 * Capabilities of a Provider
 *
 * This configuration struct has multiple uses:
 * * Act as capabilities of a provider.
 * * Act as requirement for [`create_provider`](crate::prelude::create_provider).
 *
 * Depending on the use some properties have different meanings:
 * * Currently a provider may only have one security level.
 * * The requester may ask for a provider that has at a minimum one security level or at a maximum another security level.
 * * A provider has certain algorithm he at least in some form supports.
 * * A requester may ask for minimum requirements regarding these algorithms.
 *
 * ### Example
 *
 * A provider might return capabilities like:
 * ```
 * # use crypto_layer::prelude::*;
 * # use std::collections::HashSet;
 *
 * let apple_provider_capabilities = ProviderConfig {
 *     max_security_level: SecurityLevel::Hardware,
 *     min_security_level: SecurityLevel::Hardware,
 *     supported_ciphers: HashSet::from([Cipher::AesGcm128, Cipher::AesGcm256]),
 *     supported_asym_spec: HashSet::from([AsymmetricKeySpec::P256]),
 *     supported_hashes: HashSet::from([
 *         CryptoHash::Sha2_224,
 *         CryptoHash::Sha2_256,
 *         CryptoHash::Sha2_384,
 *         CryptoHash::Sha2_512,
 *     ]),
 * };
 *
 * ```
 * Such provider then is ought to use a secure element (apart from the `ANDROID_PROVIDER`)
 * and at least support these algorithms **in one form or another** .
 *
 * Please be aware, that `supported_ciphers` does not imply support for symmetric cryptography!
 *
 * A requestor might ask for a provider with capabilities like:
 * ```
 * # use crypto_layer::prelude::*;
 * # use std::collections::HashSet;
 *
 * let requested_capabilities = ProviderConfig {
 *     max_security_level: SecurityLevel::Hardware,
 *     min_security_level: SecurityLevel::Software,
 *     supported_ciphers: HashSet::from([Cipher::AesGcm256]),
 *     supported_asym_spec: HashSet::from([AsymmetricKeySpec::P256]),
 *     supported_hashes: HashSet::from([
 *         CryptoHash::Sha2_256,
 *         CryptoHash::Sha2_512,
 *     ]),
 * };
 * ```
 *
 * As the requested capabilities are a subset of the provided capabilities above,
 * this requestor might be assigned the apple secure enclave provider on apple platforms.
 */
export type ProviderConfig = {
  /**
   * Highest security supported or maximum security requested.
   *
   * As an example, the software fallback provider has a maximum security level of [`SecurityLevel::Software`].
   */
  max_security_level: SecurityLevel;
  /**
   * Minimum security level supported or security level required.
   *
   * As an example:
   * If one wishes to use provider that is based on a secure element, one would require [`SecurityLevel::Hardware`].
   */
  min_security_level: SecurityLevel;
  /**
   * Cipher algorithms supported in one fashion or another or cipher algorithms required.
   *
   * A provider might support cipher algorithms returned as capabilities in following ways:
   * * Supports symmetric encryption with said cipher.
   * * Supports asymmetric hybrid encryption with said cipher. (What standard is used for the hybrid encryption is not set.)
   */
  supported_ciphers: Array<Cipher>;
  /**
   * Hashing algorithm supported for either the use with signing (symmetric or asymmetric) operations or encryption operations (symmetric or asymmetric),
   * or hashing algorithm required for the same purpose.
   *
   * A provider that supports a hash algorithm **may or may not** support following operations in combination with said hashing algorithm:
   * * [`KeyHandle::hmac()`](crate::prelude::KeyHandle::hmac)
   * * [`KeyHandle::verify_hmac()`](crate::prelude::KeyHandle::verify_hmac)
   * * [`KeyHandle::encrypt()`](crate::prelude::KeyHandle::encrypt())
   * * [`KeyHandle::decrypt_data()`](crate::prelude::KeyHandle::decrypt_data())
   * * [`KeyPairHandle::sign_data`](crate::prelude::KeyPairHandle::sign_data)
   * * [`KeyPairHandle::verify_signature`](crate::prelude::KeyPairHandle::verify_signature)
   * * [`KeyPairHandle::encrypt_data()`](crate::prelude::KeyPairHandle::encrypt_data)
   * * [`KeyPairHandle::decrypt_data()`](crate::prelude::KeyPairHandle::decrypt_data)
   */
  supported_hashes: Array<CryptoHash>;
  /**
   * Asymmetric cryptographic algorithms supported or required.
   *
   * A provider supporting an asymmetric cryptographic algorithm **may or may not** support said algorithm for signing or encryption operations.
   */
  supported_asym_spec: Array<AsymmetricKeySpec>;
};
