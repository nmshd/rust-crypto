// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AdditionalConfig } from "./AdditionalConfig";

/**
 * Key metadata store configuration
 *
 * Due to an accident, this configuration became a vector.
 *
 * If neither [`AdditionalConfig::KVStoreConfig`] nor [`AdditionalConfig::FileStoreConfig`] are supplied
 * to [`create_provider()`] or to [`create_provider_from_name()`],
 * a provider will be created that is only capable of creating ephemeral keys!
 *
 * To protect key metadata against unauthorized change, it is recommended to make use of
 * [`AdditionalConfig::StorageConfigHMAC`] or [`AdditionalConfig::StorageConfigDSA`].
 * (This may only apply if you use multiple providers and one is of [`SecurityLevel::Hardware`] or above.)
 *
 * If the fallback software provider is used with [AdditionalConfig::StorageConfigSymmetricEncryption]
 * or [AdditionalConfig::StorageConfigAsymmetricEncryption], the stored secret keys are secured by
 * the provided key, which in turn makes such construct a hybrid provider (as the keys at rest have hardware security protection).
 *
 * ## Example
 *
 * ```rust
 * # use crypto_layer::prelude::*;
 *
 * let implementation_config = ProviderImplConfig {
 *       additional_config: vec![
 *          AdditionalConfig::FileStoreConfig {
 *              db_dir: "./testdb".to_owned(),
 *          }
 *      ],
 * };
 * ```
 *
 * [`create_provider()`]: crate::prelude::create_provider
 * [`create_provider_from_name()`]: crate::prelude::create_provider_from_name
 */
export type ProviderImplConfig = { additional_config: Array<AdditionalConfig> };
