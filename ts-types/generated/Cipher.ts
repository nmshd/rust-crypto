// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ChCha20Mode } from "./ChCha20Mode";
import type { KeyBits } from "./KeyBits";
import type { Rc2KeyBits } from "./Rc2KeyBits";
import type { SymmetricMode } from "./SymmetricMode";
import type { TripleDesNumKeys } from "./TripleDesNumKeys";

/**
 * Represents the available cipher algorithms.
 *
 * This enum provides a C-compatible representation of various algorithms supported,
 * including AES, ChaCha20 variants, Triple DES, DES, RC2, and Camellia. Some algorithms can be configured with specific modes of operation and key sizes.
 * It is designed for flexibility, allowing for easy extension to include additional cipher algorithms.
 * Stream ciphers encrypt plaintext one bit or byte at a time, offering different security and performance characteristics compared to block ciphers.
 * XChaCha20 is the recommended stream cipher for new applications due to its strong security profile.
 *
 * # Examples
 *
 * Using `Cipher` with AES in CBC mode and a 256-bit key:
 *
 * ```
 * use crypto_layer::common::crypto::algorithms::{KeyBits,encryption::{Cipher, SymmetricMode}};
 *
 * let cipher = Cipher::Aes(SymmetricMode::Cbc, KeyBits::Bits256);
 * ```
 *
 * Using `Cipher` with ChaCha20:
 *
 * ```
 * use crypto_layer::common::crypto::algorithms::encryption::Cipher;
 *
 * let cipher = Cipher::Chacha20;
 * ```
 *
 * # Note
 *
 * Marked with `#[repr(C)]` to ensure it has the same memory layout as a C enum,
 * facilitating ABI compatibility and interfacing with C code.
 * flutter_rust_bridge:non_opaque
 */
export type Cipher =
  | { "Aes": [SymmetricMode, KeyBits] }
  | { "TripleDes": TripleDesNumKeys }
  | "Des"
  | { "Rc2": Rc2KeyBits }
  | { "Camellia": [SymmetricMode, KeyBits] }
  | "Rc4"
  | { "Chacha20": ChCha20Mode };
