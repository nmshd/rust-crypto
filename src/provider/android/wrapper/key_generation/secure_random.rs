use robusta_jni::bridge;

#[bridge]
/// This module contains the JNI bindings for the `SecureRandom` class in the `java.security` package.
/// This might not even be necessary. The `SecureRandom` is automatically generated by `KeyPairGenerator.initialize`
pub(crate) mod jni {
    use robusta_jni::{
        convert::{IntoJavaValue, Signature, TryFromJavaValue, TryIntoJavaValue},
        jni::errors::Result as JniResult,
        jni::objects::AutoLocal,
        jni::JNIEnv,
    };

    /// Represents the `SecureRandom` class in Java.
    #[derive(Signature, TryIntoJavaValue, IntoJavaValue, TryFromJavaValue)]
    #[package(java.security)]
    pub(crate) struct SecureRandom<'env: 'borrow, 'borrow> {
        #[instance]
        pub(crate) raw: AutoLocal<'env, 'borrow>,
    }

    impl<'env: 'borrow, 'borrow> SecureRandom<'env, 'borrow> {
        /// Constructs a new `SecureRandom` instance.
        #[constructor]
        pub(crate) extern "java" fn new(env: &'borrow JNIEnv<'env>) -> JniResult<Self> {}

        /// Returns the algorithm name of the `SecureRandom` instance.
        pub(crate) extern "java" fn getAlgorithm(&self, env: &JNIEnv<'env>) -> JniResult<String> {}
    }
}
