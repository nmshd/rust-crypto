// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use std::future::Future;
use std::pin::Pin;

use crate::*;
use crypto_layer::common::config::DynFuture;
use crypto_layer::common::error::*;
use crypto_layer::common::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.8.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 821520627;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crypto_layer__common__error__CalError_backtrace_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CalError_backtrace",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::error::CalError::backtrace(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__error__CalError_error_kind_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CalError_error_kind",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::error::CalError::error_kind(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__DhExchange_add_external_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DhExchange_add_external",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>,
            >>::sse_decode(&mut deserializer);
            let api_external_key = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::DHExchange::add_external(
                        &mut *api_that_guard,
                        &api_external_key,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__DhExchange_add_external_final_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DhExchange_add_external_final",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>,
            >>::sse_decode(&mut deserializer);
            let api_external_key = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::DHExchange::add_external_final(
                        &mut *api_that_guard,
                        &api_external_key,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__DhExchange_get_public_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DhExchange_get_public_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::DHExchange::get_public_key(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_decrypt_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_decrypt_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            let api_encrypted_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_iv = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyHandle::decrypt_data(
                        &*api_that_guard,
                        &api_encrypted_data,
                        &api_iv,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_delete_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_delete",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <KeyHandle>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let output_ok = crypto_layer::common::KeyHandle::delete(api_that)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_encrypt_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_encrypt_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::KeyHandle::encrypt_data(&*api_that_guard, &api_data)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_extract_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_extract_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyHandle::extract_key(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_hmac_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_hmac",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::KeyHandle::hmac(&*api_that_guard, &api_data)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyHandle::id(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_spec_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_spec",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(crypto_layer::common::KeyHandle::spec(
                        &*api_that_guard,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyHandle_verify_hmac_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyHandle_verify_hmac",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_hmac = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyHandle::verify_hmac(
                        &*api_that_guard,
                        &api_data,
                        &api_hmac,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_decrypt_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_decrypt_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyPairHandle::decrypt_data(
                        &*api_that_guard,
                        &api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_delete_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_delete",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <KeyPairHandle>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let output_ok = crypto_layer::common::KeyPairHandle::delete(api_that)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_encrypt_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_encrypt_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyPairHandle::encrypt_data(
                        &*api_that_guard,
                        &api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_extract_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_extract_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::KeyPairHandle::extract_key(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_get_public_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_get_public_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::KeyPairHandle::get_public_key(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyPairHandle::id(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_sign_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_sign_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyPairHandle::sign_data(
                        &*api_that_guard,
                        &api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_spec_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_spec",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::KeyPairHandle::spec(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__KeyPairHandle_verify_signature_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "KeyPairHandle_verify_signature",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
            >>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_signature = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::KeyPairHandle::verify_signature(
                        &*api_that_guard,
                        &api_data,
                        &api_signature,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_create_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_create_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec = <crypto_layer::common::config::KeySpec>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::Provider::create_key(&mut *api_that_guard, api_spec)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_create_key_pair_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_create_key_pair",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec =
                <crypto_layer::common::config::KeyPairSpec>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::create_key_pair(
                        &mut *api_that_guard,
                        api_spec,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_get_all_keys_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_get_all_keys",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::get_all_keys(&*api_that_guard)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_get_capabilities_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_get_capabilities",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::Provider::get_capabilities(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_import_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_import_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec = <crypto_layer::common::config::KeySpec>::sse_decode(&mut deserializer);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::import_key(
                        &mut *api_that_guard,
                        api_spec,
                        &api_data,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_import_key_pair_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_import_key_pair",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec =
                <crypto_layer::common::config::KeyPairSpec>::sse_decode(&mut deserializer);
            let api_public_key = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_private_key = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::import_key_pair(
                        &mut *api_that_guard,
                        api_spec,
                        &api_public_key,
                        &api_private_key,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_import_public_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_import_public_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec =
                <crypto_layer::common::config::KeyPairSpec>::sse_decode(&mut deserializer);
            let api_public_key = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::import_public_key(
                        &mut *api_that_guard,
                        api_spec,
                        &api_public_key,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_load_key_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_load_key",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok =
                        crypto_layer::common::Provider::load_key(&mut *api_that_guard, api_id)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_load_key_pair_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_load_key_pair",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::load_key_pair(
                        &mut *api_that_guard,
                        api_id,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_provider_name_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_provider_name",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::Provider::provider_name(&*api_that_guard),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__Provider_start_ephemeral_dh_exchange_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Provider_start_ephemeral_dh_exchange",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
            >>::sse_decode(&mut deserializer);
            let api_spec =
                <crypto_layer::common::config::KeyPairSpec>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, CalError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, true,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                            _ => unreachable!(),
                        }
                    }
                    let mut api_that_guard = api_that_guard.unwrap();
                    let output_ok = crypto_layer::common::Provider::start_ephemeral_dh_exchange(
                        &mut *api_that_guard,
                        api_spec,
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__crypto__algorithms__encryption__asymmetric_key_spec_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "asymmetric_key_spec_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::default())?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crypto_layer__common__crypto__algorithms__encryption__cipher_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cipher_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::crypto::algorithms::encryption::Cipher::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__factory__create_provider_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_provider",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_conf =
                <crypto_layer::common::config::ProviderConfig>::sse_decode(&mut deserializer);
            let api_impl_conf =
                <crypto_layer::common::config::ProviderImplConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::factory::create_provider(&api_conf, api_impl_conf),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__factory__create_provider_from_name_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_provider_from_name",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_impl_conf =
                <crypto_layer::common::config::ProviderImplConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::factory::create_provider_from_name(
                            &api_name,
                            api_impl_conf,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__crypto__algorithms__hashes__crypto_hash_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "crypto_hash_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::crypto::algorithms::hashes::CryptoHash::default(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__factory__get_all_providers_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_all_providers",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crypto_layer::common::factory::get_all_providers())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__crypto__get_default_config_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_default_config",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_get_fn =
                decode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
                    <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
                );
            let api_store_fn =
                decode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
                    <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
                );
            let api_delete_fn = decode_DartFn_Inputs_String_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_all_keys_fn = decode_DartFn_Inputs__Output_list_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::crypto::get_default_config(
                                api_get_fn,
                                api_store_fn,
                                api_delete_fn,
                                api_all_keys_fn,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crypto_layer__common__factory__get_provider_capabilities_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_provider_capabilities",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_impl_config =
                <crypto_layer::common::config::ProviderImplConfig>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::factory::get_provider_capabilities(api_impl_config),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__config__key_pair_spec_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "key_pair_spec_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crypto_layer::common::config::KeyPairSpec::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__config__key_spec_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "key_spec_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crypto_layer::common::config::KeySpec::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__crypto__pkcs__standards__oid_type_as_str_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "oid_type_as_str",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crypto_layer::common::crypto::pkcs::standards::OidType>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crypto_layer::common::crypto::pkcs::standards::OidType::as_str(&api_that);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crypto_layer__common__config__provider_impl_config_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "provider_impl_config_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_get_fn =
                <Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>::sse_decode(
                    &mut deserializer,
                );
            let api_store_fn =
                <Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>::sse_decode(
                    &mut deserializer,
                );
            let api_delete_fn = <Arc<
                dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync,
            >>::sse_decode(&mut deserializer);
            let api_all_keys_fn =
                <Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>::sse_decode(
                    &mut deserializer,
                );
            let api_additional_config =
                <Vec<crypto_layer::common::config::AdditionalConfig>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crypto_layer::common::config::ProviderImplConfig::new(
                            api_get_fn,
                            api_store_fn,
                            api_delete_fn,
                            api_all_keys_fn,
                            api_additional_config,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    match None::<crypto_layer::common::config::AdditionalConfig>.unwrap() {
        crypto_layer::common::config::AdditionalConfig::KVStoreConfig {
            get_fn,
            store_fn,
            delete_fn,
            all_keys_fn,
        } => {
            let _: Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync> = get_fn;
            let _: Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync> = store_fn;
            let _: Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync> =
                delete_fn;
            let _: Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync> = all_keys_fn;
        }
        crypto_layer::common::config::AdditionalConfig::FileStoreConfig { db_dir } => {
            let _: String = db_dir;
        }
        crypto_layer::common::config::AdditionalConfig::StorageConfigHMAC(field0) => {
            let _: KeyHandle = field0;
        }
        crypto_layer::common::config::AdditionalConfig::StorageConfigDSA(field0) => {
            let _: KeyPairHandle = field0;
        }
        crypto_layer::common::config::AdditionalConfig::StorageConfigPass(field0) => {
            let _: String = field0;
        }
    }
    match None::<crypto_layer::common::error::CalErrorKind>.unwrap() {
        crypto_layer::common::error::CalErrorKind::NotImplemented => {}
        crypto_layer::common::error::CalErrorKind::BadParameter {
            description,
            internal,
        } => {
            let _: String = description;
            let _: bool = internal;
        }
        crypto_layer::common::error::CalErrorKind::MissingKey { key_id, key_type } => {
            let _: String = key_id;
            let _: crypto_layer::common::error::KeyType = key_type;
        }
        crypto_layer::common::error::CalErrorKind::MissingValue {
            description,
            internal,
        } => {
            let _: String = description;
            let _: bool = internal;
        }
        crypto_layer::common::error::CalErrorKind::FailedOperation {
            description,
            internal,
        } => {
            let _: String = description;
            let _: bool = internal;
        }
        crypto_layer::common::error::CalErrorKind::InitializationError {
            description,
            internal,
        } => {
            let _: String = description;
            let _: bool = internal;
        }
        crypto_layer::common::error::CalErrorKind::UnsupportedAlgorithm(field0) => {
            let _: String = field0;
        }
        crypto_layer::common::error::CalErrorKind::EphermalKeyError => {}
        crypto_layer::common::error::CalErrorKind::Other => {}
    }
    {
        let KeyPairSpec = None::<crypto_layer::common::config::KeyPairSpec>.unwrap();
        let _: crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec =
            KeyPairSpec.asym_spec;
        let _: Option<crypto_layer::common::crypto::algorithms::encryption::Cipher> =
            KeyPairSpec.cipher;
        let _: crypto_layer::common::crypto::algorithms::hashes::CryptoHash =
            KeyPairSpec.signing_hash;
        let _: bool = KeyPairSpec.ephemeral;
        let _: bool = KeyPairSpec.non_exportable;
    }
    {
        let KeySpec = None::<crypto_layer::common::config::KeySpec>.unwrap();
        let _: crypto_layer::common::crypto::algorithms::encryption::Cipher = KeySpec.cipher;
        let _: crypto_layer::common::crypto::algorithms::hashes::CryptoHash = KeySpec.signing_hash;
        let _: bool = KeySpec.ephemeral;
    }
    {
        let ProviderConfig = None::<crypto_layer::common::config::ProviderConfig>.unwrap();
        let _: crypto_layer::common::config::SecurityLevel = ProviderConfig.max_security_level;
        let _: crypto_layer::common::config::SecurityLevel = ProviderConfig.min_security_level;
        let _: std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::encryption::Cipher,
        > = ProviderConfig.supported_ciphers;
        let _: std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash,
        > = ProviderConfig.supported_hashes;
        let _: std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
        > = ProviderConfig.supported_asym_spec;
    }
    {
        let ProviderImplConfig = None::<crypto_layer::common::config::ProviderImplConfig>.unwrap();
        let _: Vec<crypto_layer::common::config::AdditionalConfig> =
            ProviderImplConfig.additional_config;
    }
    match None::<crypto_layer::common::config::Spec>.unwrap() {
        crypto_layer::common::config::Spec::KeySpec(field0) => {
            let _: crypto_layer::common::config::KeySpec = field0;
        }
        crypto_layer::common::config::Spec::KeyPairSpec(field0) => {
            let _: crypto_layer::common::config::KeyPairSpec = field0;
        }
    }
    {
        let T = None::<crypto_layer::common::T>.unwrap();
    }
};

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<Option<Vec<u8>>> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> Option<Vec<u8>> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<Option<Vec<u8>>>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, Vec<u8>) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: Vec<u8>,
    ) -> bool {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String, arg1: Vec<u8>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
fn decode_DartFn_Inputs__Output_list_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<Vec<String>> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> Vec<String> {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<Vec<String>>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
        Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for CalError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for DHExchange {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for KeyHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for KeyPairHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Provider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for std::collections::HashSet<
        crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
        >>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashSet<crypto_layer::common::crypto::algorithms::encryption::Cipher>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crypto_layer::common::crypto::algorithms::encryption::Cipher>>::sse_decode(
                deserializer,
            );
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashSet<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>>::sse_decode(
                deserializer,
            );
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crypto_layer::common::config::AdditionalConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_getFn =
                    <Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>::sse_decode(
                        deserializer,
                    );
                let mut var_storeFn =
                    <Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>::sse_decode(
                        deserializer,
                    );
                let mut var_deleteFn = <Arc<
                    dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync,
                >>::sse_decode(deserializer);
                let mut var_allKeysFn =
                    <Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>::sse_decode(
                        deserializer,
                    );
                return crypto_layer::common::config::AdditionalConfig::KVStoreConfig {
                    get_fn: var_getFn,
                    store_fn: var_storeFn,
                    delete_fn: var_deleteFn,
                    all_keys_fn: var_allKeysFn,
                };
            }
            1 => {
                let mut var_dbDir = <String>::sse_decode(deserializer);
                return crypto_layer::common::config::AdditionalConfig::FileStoreConfig {
                    db_dir: var_dbDir,
                };
            }
            2 => {
                let mut var_field0 = <KeyHandle>::sse_decode(deserializer);
                return crypto_layer::common::config::AdditionalConfig::StorageConfigHMAC(
                    var_field0,
                );
            }
            3 => {
                let mut var_field0 = <KeyPairHandle>::sse_decode(deserializer);
                return crypto_layer::common::config::AdditionalConfig::StorageConfigDSA(
                    var_field0,
                );
            }
            4 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crypto_layer::common::config::AdditionalConfig::StorageConfigPass(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA1024,
1 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA2048,
2 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA3072,
3 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA4096,
4 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA8192,
5 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P256,
6 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P384,
7 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P521,
8 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Secp256k1,
9 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP256r1,
10 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP384r1,
11 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP512r1,
12 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP638,
13 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve25519,
14 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve448,
15 => crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Frp256v1,
            _ => unreachable!("Invalid variant for AsymmetricKeySpec: {}", inner),
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crypto_layer::common::error::CalErrorKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crypto_layer::common::error::CalErrorKind::NotImplemented;
            }
            1 => {
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_internal = <bool>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::BadParameter {
                    description: var_description,
                    internal: var_internal,
                };
            }
            2 => {
                let mut var_keyId = <String>::sse_decode(deserializer);
                let mut var_keyType =
                    <crypto_layer::common::error::KeyType>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::MissingKey {
                    key_id: var_keyId,
                    key_type: var_keyType,
                };
            }
            3 => {
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_internal = <bool>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::MissingValue {
                    description: var_description,
                    internal: var_internal,
                };
            }
            4 => {
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_internal = <bool>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::FailedOperation {
                    description: var_description,
                    internal: var_internal,
                };
            }
            5 => {
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_internal = <bool>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::InitializationError {
                    description: var_description,
                    internal: var_internal,
                };
            }
            6 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crypto_layer::common::error::CalErrorKind::UnsupportedAlgorithm(var_field0);
            }
            7 => {
                return crypto_layer::common::error::CalErrorKind::EphermalKeyError;
            }
            8 => {
                return crypto_layer::common::error::CalErrorKind::Other;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crypto_layer::common::crypto::algorithms::encryption::Cipher {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm128,
            1 => crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm256,
            2 => crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc128,
            3 => crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc256,
            4 => crypto_layer::common::crypto::algorithms::encryption::Cipher::ChaCha20Poly1305,
            5 => crypto_layer::common::crypto::algorithms::encryption::Cipher::XChaCha20Poly1305,
            _ => unreachable!("Invalid variant for Cipher: {}", inner),
        };
    }
}

impl SseDecode for crypto_layer::common::crypto::algorithms::hashes::CryptoHash {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_224,
            1 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_256,
            2 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_384,
            3 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512,
            4 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_224,
            5 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_256,
            6 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_224,
            7 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_256,
            8 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_384,
            9 => crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_512,
            _ => unreachable!("Invalid variant for CryptoHash: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crypto_layer::common::config::KeyPairSpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_asymSpec =
            <crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>::sse_decode(
                deserializer,
            );
        let mut var_cipher =
            <Option<crypto_layer::common::crypto::algorithms::encryption::Cipher>>::sse_decode(
                deserializer,
            );
        let mut var_signingHash =
            <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_decode(
                deserializer,
            );
        let mut var_ephemeral = <bool>::sse_decode(deserializer);
        let mut var_nonExportable = <bool>::sse_decode(deserializer);
        return crypto_layer::common::config::KeyPairSpec {
            asym_spec: var_asymSpec,
            cipher: var_cipher,
            signing_hash: var_signingHash,
            ephemeral: var_ephemeral,
            non_exportable: var_nonExportable,
        };
    }
}

impl SseDecode for crypto_layer::common::config::KeySpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_cipher =
            <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_decode(
                deserializer,
            );
        let mut var_signingHash =
            <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_decode(
                deserializer,
            );
        let mut var_ephemeral = <bool>::sse_decode(deserializer);
        return crypto_layer::common::config::KeySpec {
            cipher: var_cipher,
            signing_hash: var_signingHash,
            ephemeral: var_ephemeral,
        };
    }
}

impl SseDecode for crypto_layer::common::error::KeyType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::error::KeyType::Public,
            1 => crypto_layer::common::error::KeyType::Private,
            2 => crypto_layer::common::error::KeyType::PublicAndPrivate,
            3 => crypto_layer::common::error::KeyType::Symmetric,
            _ => unreachable!("Invalid variant for KeyType: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crypto_layer::common::config::AdditionalConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crypto_layer::common::config::AdditionalConfig>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crypto_layer::common::crypto::algorithms::encryption::Cipher> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crypto_layer::common::crypto::algorithms::hashes::CryptoHash> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crypto_layer::common::config::ProviderConfig)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <(String, crypto_layer::common::config::ProviderConfig)>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crypto_layer::common::config::Spec)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crypto_layer::common::config::Spec)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crypto_layer::common::crypto::pkcs::standards::OidType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::crypto::pkcs::standards::OidType::Sha1WithRsaEncryption,
            1 => crypto_layer::common::crypto::pkcs::standards::OidType::Sha256WithRsaEncryption,
            2 => crypto_layer::common::crypto::pkcs::standards::OidType::Sha384WithRsaEncryption,
            3 => crypto_layer::common::crypto::pkcs::standards::OidType::Sha512WithRsaEncryption,
            4 => crypto_layer::common::crypto::pkcs::standards::OidType::IdSha1,
            5 => crypto_layer::common::crypto::pkcs::standards::OidType::IdSha256,
            6 => crypto_layer::common::crypto::pkcs::standards::OidType::IdSha384,
            7 => crypto_layer::common::crypto::pkcs::standards::OidType::IdSha512,
            8 => crypto_layer::common::crypto::pkcs::standards::OidType::RsaEncryption,
            9 => crypto_layer::common::crypto::pkcs::standards::OidType::IdRsaSsaPss,
            10 => crypto_layer::common::crypto::pkcs::standards::OidType::EcPublicKey,
            11 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha1,
            12 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha256,
            13 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha384,
            14 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha512,
            15 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Cbc,
            16 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Cbc,
            17 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Cbc,
            18 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Gcm,
            19 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Gcm,
            20 => crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Gcm,
            21 => crypto_layer::common::crypto::pkcs::standards::OidType::DhPublicNumber,
            22 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdhStandardCurves,
            23 => crypto_layer::common::crypto::pkcs::standards::OidType::EcdhSpecifiedCurves,
            24 => crypto_layer::common::crypto::pkcs::standards::OidType::SubjectKeyIdentifier,
            25 => crypto_layer::common::crypto::pkcs::standards::OidType::KeyUsage,
            26 => crypto_layer::common::crypto::pkcs::standards::OidType::SubjectAltName,
            27 => crypto_layer::common::crypto::pkcs::standards::OidType::BasicConstraints,
            28 => crypto_layer::common::crypto::pkcs::standards::OidType::ExtendedKeyUsage,
            29 => crypto_layer::common::crypto::pkcs::standards::OidType::ServerAuth,
            30 => crypto_layer::common::crypto::pkcs::standards::OidType::ClientAuth,
            31 => crypto_layer::common::crypto::pkcs::standards::OidType::CodeSigning,
            32 => crypto_layer::common::crypto::pkcs::standards::OidType::EmailProtection,
            33 => crypto_layer::common::crypto::pkcs::standards::OidType::TimeStamping,
            34 => crypto_layer::common::crypto::pkcs::standards::OidType::OcspSigning,
            35 => crypto_layer::common::crypto::pkcs::standards::OidType::DocumentSigning,
            36 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkix,
            37 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7Data,
            38 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedData,
            39 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EnvelopedData,
            40 => {
                crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedAndEnvelopedData
            }
            41 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7DigestData,
            42 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EncryptedData,
            43 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9EmailAddress,
            44 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9UnstructuredName,
            45 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9ContentType,
            46 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9MessageDigest,
            47 => crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9SigningTime,
            _ => unreachable!("Invalid variant for OidType: {}", inner),
        };
    }
}

impl SseDecode for Option<Provider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Provider>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crypto_layer::common::crypto::algorithms::encryption::Cipher> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crypto_layer::common::config::ProviderConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crypto_layer::common::config::ProviderConfig>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crypto_layer::common::config::ProviderConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_maxSecurityLevel =
            <crypto_layer::common::config::SecurityLevel>::sse_decode(deserializer);
        let mut var_minSecurityLevel =
            <crypto_layer::common::config::SecurityLevel>::sse_decode(deserializer);
        let mut var_supportedCiphers = <std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::encryption::Cipher,
        >>::sse_decode(deserializer);
        let mut var_supportedHashes = <std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash,
        >>::sse_decode(deserializer);
        let mut var_supportedAsymSpec = <std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
        >>::sse_decode(deserializer);
        return crypto_layer::common::config::ProviderConfig {
            max_security_level: var_maxSecurityLevel,
            min_security_level: var_minSecurityLevel,
            supported_ciphers: var_supportedCiphers,
            supported_hashes: var_supportedHashes,
            supported_asym_spec: var_supportedAsymSpec,
        };
    }
}

impl SseDecode for crypto_layer::common::config::ProviderImplConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_additionalConfig =
            <Vec<crypto_layer::common::config::AdditionalConfig>>::sse_decode(deserializer);
        return crypto_layer::common::config::ProviderImplConfig {
            additional_config: var_additionalConfig,
        };
    }
}

impl SseDecode for (Vec<u8>, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crypto_layer::common::config::ProviderConfig) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crypto_layer::common::config::ProviderConfig>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crypto_layer::common::config::Spec) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crypto_layer::common::config::Spec>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crypto_layer::common::config::SecurityLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crypto_layer::common::config::SecurityLevel::Hardware,
            1 => crypto_layer::common::config::SecurityLevel::Software,
            2 => crypto_layer::common::config::SecurityLevel::Network,
            3 => crypto_layer::common::config::SecurityLevel::Unsafe,
            _ => unreachable!("Invalid variant for SecurityLevel: {}", inner),
        };
    }
}

impl SseDecode for crypto_layer::common::config::Spec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crypto_layer::common::config::KeySpec>::sse_decode(deserializer);
                return crypto_layer::common::config::Spec::KeySpec(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crypto_layer::common::config::KeyPairSpec>::sse_decode(deserializer);
                return crypto_layer::common::config::Spec::KeyPairSpec(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crypto_layer::common::T {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crypto_layer::common::T {};
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crypto_layer__common__error__CalError_backtrace_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crypto_layer__common__error__CalError_error_kind_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crypto_layer__common__DhExchange_add_external_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crypto_layer__common__DhExchange_add_external_final_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crypto_layer__common__DhExchange_get_public_key_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crypto_layer__common__KeyHandle_decrypt_data_impl(port, ptr, rust_vec_len, data_len),
7 => wire__crypto_layer__common__KeyHandle_delete_impl(port, ptr, rust_vec_len, data_len),
8 => wire__crypto_layer__common__KeyHandle_encrypt_data_impl(port, ptr, rust_vec_len, data_len),
9 => wire__crypto_layer__common__KeyHandle_extract_key_impl(port, ptr, rust_vec_len, data_len),
10 => wire__crypto_layer__common__KeyHandle_hmac_impl(port, ptr, rust_vec_len, data_len),
11 => wire__crypto_layer__common__KeyHandle_id_impl(port, ptr, rust_vec_len, data_len),
12 => wire__crypto_layer__common__KeyHandle_spec_impl(port, ptr, rust_vec_len, data_len),
13 => wire__crypto_layer__common__KeyHandle_verify_hmac_impl(port, ptr, rust_vec_len, data_len),
14 => wire__crypto_layer__common__KeyPairHandle_decrypt_data_impl(port, ptr, rust_vec_len, data_len),
15 => wire__crypto_layer__common__KeyPairHandle_delete_impl(port, ptr, rust_vec_len, data_len),
16 => wire__crypto_layer__common__KeyPairHandle_encrypt_data_impl(port, ptr, rust_vec_len, data_len),
17 => wire__crypto_layer__common__KeyPairHandle_extract_key_impl(port, ptr, rust_vec_len, data_len),
18 => wire__crypto_layer__common__KeyPairHandle_get_public_key_impl(port, ptr, rust_vec_len, data_len),
19 => wire__crypto_layer__common__KeyPairHandle_id_impl(port, ptr, rust_vec_len, data_len),
20 => wire__crypto_layer__common__KeyPairHandle_sign_data_impl(port, ptr, rust_vec_len, data_len),
21 => wire__crypto_layer__common__KeyPairHandle_spec_impl(port, ptr, rust_vec_len, data_len),
22 => wire__crypto_layer__common__KeyPairHandle_verify_signature_impl(port, ptr, rust_vec_len, data_len),
23 => wire__crypto_layer__common__Provider_create_key_impl(port, ptr, rust_vec_len, data_len),
24 => wire__crypto_layer__common__Provider_create_key_pair_impl(port, ptr, rust_vec_len, data_len),
25 => wire__crypto_layer__common__Provider_get_all_keys_impl(port, ptr, rust_vec_len, data_len),
26 => wire__crypto_layer__common__Provider_get_capabilities_impl(port, ptr, rust_vec_len, data_len),
27 => wire__crypto_layer__common__Provider_import_key_impl(port, ptr, rust_vec_len, data_len),
28 => wire__crypto_layer__common__Provider_import_key_pair_impl(port, ptr, rust_vec_len, data_len),
29 => wire__crypto_layer__common__Provider_import_public_key_impl(port, ptr, rust_vec_len, data_len),
30 => wire__crypto_layer__common__Provider_load_key_impl(port, ptr, rust_vec_len, data_len),
31 => wire__crypto_layer__common__Provider_load_key_pair_impl(port, ptr, rust_vec_len, data_len),
32 => wire__crypto_layer__common__Provider_provider_name_impl(port, ptr, rust_vec_len, data_len),
33 => wire__crypto_layer__common__Provider_start_ephemeral_dh_exchange_impl(port, ptr, rust_vec_len, data_len),
35 => wire__crypto_layer__common__crypto__algorithms__encryption__asymmetric_key_spec_default_impl(port, ptr, rust_vec_len, data_len),
36 => wire__crypto_layer__common__crypto__algorithms__encryption__cipher_default_impl(port, ptr, rust_vec_len, data_len),
37 => wire__crypto_layer__common__factory__create_provider_impl(port, ptr, rust_vec_len, data_len),
38 => wire__crypto_layer__common__factory__create_provider_from_name_impl(port, ptr, rust_vec_len, data_len),
39 => wire__crypto_layer__common__crypto__algorithms__hashes__crypto_hash_default_impl(port, ptr, rust_vec_len, data_len),
40 => wire__crypto_layer__common__factory__get_all_providers_impl(port, ptr, rust_vec_len, data_len),
41 => wire__crate__api__crypto__get_default_config_impl(port, ptr, rust_vec_len, data_len),
42 => wire__crypto_layer__common__factory__get_provider_capabilities_impl(port, ptr, rust_vec_len, data_len),
43 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
44 => wire__crypto_layer__common__config__key_pair_spec_default_impl(port, ptr, rust_vec_len, data_len),
45 => wire__crypto_layer__common__config__key_spec_default_impl(port, ptr, rust_vec_len, data_len),
46 => wire__crypto_layer__common__crypto__pkcs__standards__oid_type_as_str_impl(port, ptr, rust_vec_len, data_len),
47 => wire__crypto_layer__common__config__provider_impl_config_new_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>,
    > for Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>
{
    fn into_into_dart(self) -> FrbWrapper<Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>,
    > for Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>>,
    > for Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>>
    {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>
{
}

impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>,
    > for Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<CalError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<CalError> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<CalError>> for CalError {
    fn into_into_dart(self) -> FrbWrapper<CalError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<DHExchange> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<DHExchange> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<DHExchange>> for DHExchange {
    fn into_into_dart(self) -> FrbWrapper<DHExchange> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<KeyHandle> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<KeyHandle> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<KeyHandle>> for KeyHandle {
    fn into_into_dart(self) -> FrbWrapper<KeyHandle> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<KeyPairHandle> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<KeyPairHandle> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<KeyPairHandle>> for KeyPairHandle {
    fn into_into_dart(self) -> FrbWrapper<KeyPairHandle> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Provider> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Provider> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Provider>> for Provider {
    fn into_into_dart(self) -> FrbWrapper<Provider> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::AdditionalConfig> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::config::AdditionalConfig::KVStoreConfig {
                get_fn,
                store_fn,
                delete_fn,
                all_keys_fn,
            } => [
                0.into_dart(),
                get_fn.into_into_dart().into_dart(),
                store_fn.into_into_dart().into_dart(),
                delete_fn.into_into_dart().into_dart(),
                all_keys_fn.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::config::AdditionalConfig::FileStoreConfig { db_dir } => {
                [1.into_dart(), db_dir.into_into_dart().into_dart()].into_dart()
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigHMAC(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigDSA(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigPass(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::AdditionalConfig>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::AdditionalConfig>>
    for crypto_layer::common::config::AdditionalConfig
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::AdditionalConfig> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
                    crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA1024 => 0.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA2048 => 1.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA3072 => 2.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA4096 => 3.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA8192 => 4.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P256 => 5.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P384 => 6.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P521 => 7.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Secp256k1 => 8.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP256r1 => 9.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP384r1 => 10.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP512r1 => 11.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP638 => 12.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve25519 => 13.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve448 => 14.into_dart(),
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Frp256v1 => 15.into_dart(),
                    _ => unreachable!(),
                }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>,
    > for crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::error::CalErrorKind> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::error::CalErrorKind::NotImplemented => {
                [0.into_dart()].into_dart()
            }
            crypto_layer::common::error::CalErrorKind::BadParameter {
                description,
                internal,
            } => [
                1.into_dart(),
                description.into_into_dart().into_dart(),
                internal.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::error::CalErrorKind::MissingKey { key_id, key_type } => [
                2.into_dart(),
                key_id.into_into_dart().into_dart(),
                key_type.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::error::CalErrorKind::MissingValue {
                description,
                internal,
            } => [
                3.into_dart(),
                description.into_into_dart().into_dart(),
                internal.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::error::CalErrorKind::FailedOperation {
                description,
                internal,
            } => [
                4.into_dart(),
                description.into_into_dart().into_dart(),
                internal.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::error::CalErrorKind::InitializationError {
                description,
                internal,
            } => [
                5.into_dart(),
                description.into_into_dart().into_dart(),
                internal.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crypto_layer::common::error::CalErrorKind::UnsupportedAlgorithm(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crypto_layer::common::error::CalErrorKind::EphermalKeyError => {
                [7.into_dart()].into_dart()
            }
            crypto_layer::common::error::CalErrorKind::Other => [8.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::error::CalErrorKind>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::error::CalErrorKind>>
    for crypto_layer::common::error::CalErrorKind
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::error::CalErrorKind> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::Cipher>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm128 => {
                0.into_dart()
            }
            crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm256 => {
                1.into_dart()
            }
            crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc128 => {
                2.into_dart()
            }
            crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc256 => {
                3.into_dart()
            }
            crypto_layer::common::crypto::algorithms::encryption::Cipher::ChaCha20Poly1305 => {
                4.into_dart()
            }
            crypto_layer::common::crypto::algorithms::encryption::Cipher::XChaCha20Poly1305 => {
                5.into_dart()
            }
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::Cipher>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::Cipher>,
    > for crypto_layer::common::crypto::algorithms::encryption::Cipher
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<crypto_layer::common::crypto::algorithms::encryption::Cipher> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_224 => 0.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_256 => 1.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_384 => 2.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512 => 3.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_224 => {
                4.into_dart()
            }
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_256 => {
                5.into_dart()
            }
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_224 => 6.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_256 => 7.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_384 => 8.into_dart(),
            crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_512 => 9.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>,
    > for crypto_layer::common::crypto::algorithms::hashes::CryptoHash
{
    fn into_into_dart(
        self,
    ) -> FrbWrapper<crypto_layer::common::crypto::algorithms::hashes::CryptoHash> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::KeyPairSpec> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.asym_spec.into_into_dart().into_dart(),
            self.0.cipher.into_into_dart().into_dart(),
            self.0.signing_hash.into_into_dart().into_dart(),
            self.0.ephemeral.into_into_dart().into_dart(),
            self.0.non_exportable.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::KeyPairSpec>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::KeyPairSpec>>
    for crypto_layer::common::config::KeyPairSpec
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::KeyPairSpec> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::KeySpec> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.cipher.into_into_dart().into_dart(),
            self.0.signing_hash.into_into_dart().into_dart(),
            self.0.ephemeral.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::KeySpec>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::KeySpec>>
    for crypto_layer::common::config::KeySpec
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::KeySpec> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::error::KeyType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::error::KeyType::Public => 0.into_dart(),
            crypto_layer::common::error::KeyType::Private => 1.into_dart(),
            crypto_layer::common::error::KeyType::PublicAndPrivate => 2.into_dart(),
            crypto_layer::common::error::KeyType::Symmetric => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::error::KeyType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::error::KeyType>>
    for crypto_layer::common::error::KeyType
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::error::KeyType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crypto_layer::common::crypto::pkcs::standards::OidType>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::crypto::pkcs::standards::OidType::Sha1WithRsaEncryption => {
                0.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Sha256WithRsaEncryption => {
                1.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Sha384WithRsaEncryption => {
                2.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Sha512WithRsaEncryption => {
                3.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::IdSha1 => 4.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::IdSha256 => 5.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::IdSha384 => 6.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::IdSha512 => 7.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::RsaEncryption => 8.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::IdRsaSsaPss => 9.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::EcPublicKey => 10.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha1 => 11.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha256 => {
                12.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha384 => {
                13.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha512 => {
                14.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Cbc => 15.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Cbc => 16.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Cbc => 17.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Gcm => 18.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Gcm => 19.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Gcm => 20.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::DhPublicNumber => {
                21.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdhStandardCurves => {
                22.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::EcdhSpecifiedCurves => {
                23.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::SubjectKeyIdentifier => {
                24.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::KeyUsage => 25.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::SubjectAltName => {
                26.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::BasicConstraints => {
                27.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::ExtendedKeyUsage => {
                28.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::ServerAuth => 29.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::ClientAuth => 30.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::CodeSigning => 31.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::EmailProtection => {
                32.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::TimeStamping => 33.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::OcspSigning => 34.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::DocumentSigning => {
                35.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkix => 36.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7Data => 37.into_dart(),
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedData => {
                38.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EnvelopedData => {
                39.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedAndEnvelopedData => {
                40.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7DigestData => {
                41.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EncryptedData => {
                42.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9EmailAddress => {
                43.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9UnstructuredName => {
                44.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9ContentType => {
                45.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9MessageDigest => {
                46.into_dart()
            }
            crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9SigningTime => {
                47.into_dart()
            }
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::crypto::pkcs::standards::OidType>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<crypto_layer::common::crypto::pkcs::standards::OidType>,
    > for crypto_layer::common::crypto::pkcs::standards::OidType
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::crypto::pkcs::standards::OidType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::ProviderConfig> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.max_security_level.into_into_dart().into_dart(),
            self.0.min_security_level.into_into_dart().into_dart(),
            self.0.supported_ciphers.into_into_dart().into_dart(),
            self.0.supported_hashes.into_into_dart().into_dart(),
            self.0.supported_asym_spec.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::ProviderConfig>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::ProviderConfig>>
    for crypto_layer::common::config::ProviderConfig
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::ProviderConfig> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crypto_layer::common::config::ProviderImplConfig>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.additional_config.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::ProviderImplConfig>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::ProviderImplConfig>>
    for crypto_layer::common::config::ProviderImplConfig
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::ProviderImplConfig> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::SecurityLevel> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::config::SecurityLevel::Hardware => 0.into_dart(),
            crypto_layer::common::config::SecurityLevel::Software => 1.into_dart(),
            crypto_layer::common::config::SecurityLevel::Network => 2.into_dart(),
            crypto_layer::common::config::SecurityLevel::Unsafe => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::SecurityLevel>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::SecurityLevel>>
    for crypto_layer::common::config::SecurityLevel
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::SecurityLevel> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::config::Spec> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crypto_layer::common::config::Spec::KeySpec(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crypto_layer::common::config::Spec::KeyPairSpec(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::config::Spec>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::config::Spec>>
    for crypto_layer::common::config::Spec
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::config::Spec> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crypto_layer::common::T> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crypto_layer::common::T>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crypto_layer::common::T>>
    for crypto_layer::common::T
{
    fn into_into_dart(self) -> FrbWrapper<crypto_layer::common::T> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for CalError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for DHExchange {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for KeyHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for KeyPairHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for Provider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
            Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for std::collections::HashSet<
        crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashSet<crypto_layer::common::crypto::algorithms::encryption::Cipher>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crypto_layer::common::crypto::algorithms::encryption::Cipher>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashSet<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crypto_layer::common::config::AdditionalConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crypto_layer::common::config::AdditionalConfig::KVStoreConfig {
                get_fn,
                store_fn,
                delete_fn,
                all_keys_fn,
            } => {
                <i32>::sse_encode(0, serializer);
                <Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>>::sse_encode(
                    get_fn, serializer,
                );
                <Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>>::sse_encode(
                    store_fn, serializer,
                );
                <Arc < dyn Fn (String) -> Pin < Box < dyn Future < Output = () > + Send > > + Send + Sync >>::sse_encode(delete_fn, serializer);
                <Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>>::sse_encode(
                    all_keys_fn,
                    serializer,
                );
            }
            crypto_layer::common::config::AdditionalConfig::FileStoreConfig { db_dir } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(db_dir, serializer);
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigHMAC(field0) => {
                <i32>::sse_encode(2, serializer);
                <KeyHandle>::sse_encode(field0, serializer);
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigDSA(field0) => {
                <i32>::sse_encode(3, serializer);
                <KeyPairHandle>::sse_encode(field0, serializer);
            }
            crypto_layer::common::config::AdditionalConfig::StorageConfigPass(field0) => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA1024 => { 0 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA2048 => { 1 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA3072 => { 2 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA4096 => { 3 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::RSA8192 => { 4 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P256 => { 5 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P384 => { 6 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::P521 => { 7 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Secp256k1 => { 8 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP256r1 => { 9 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP384r1 => { 10 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP512r1 => { 11 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::BrainpoolP638 => { 12 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve25519 => { 13 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Curve448 => { 14 }
crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec::Frp256v1 => { 15 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crypto_layer::common::error::CalErrorKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crypto_layer::common::error::CalErrorKind::NotImplemented => {
                <i32>::sse_encode(0, serializer);
            }
            crypto_layer::common::error::CalErrorKind::BadParameter {
                description,
                internal,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(description, serializer);
                <bool>::sse_encode(internal, serializer);
            }
            crypto_layer::common::error::CalErrorKind::MissingKey { key_id, key_type } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(key_id, serializer);
                <crypto_layer::common::error::KeyType>::sse_encode(key_type, serializer);
            }
            crypto_layer::common::error::CalErrorKind::MissingValue {
                description,
                internal,
            } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(description, serializer);
                <bool>::sse_encode(internal, serializer);
            }
            crypto_layer::common::error::CalErrorKind::FailedOperation {
                description,
                internal,
            } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(description, serializer);
                <bool>::sse_encode(internal, serializer);
            }
            crypto_layer::common::error::CalErrorKind::InitializationError {
                description,
                internal,
            } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(description, serializer);
                <bool>::sse_encode(internal, serializer);
            }
            crypto_layer::common::error::CalErrorKind::UnsupportedAlgorithm(field0) => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crypto_layer::common::error::CalErrorKind::EphermalKeyError => {
                <i32>::sse_encode(7, serializer);
            }
            crypto_layer::common::error::CalErrorKind::Other => {
                <i32>::sse_encode(8, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crypto_layer::common::crypto::algorithms::encryption::Cipher {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm128 => 0,
                crypto_layer::common::crypto::algorithms::encryption::Cipher::AesGcm256 => 1,
                crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc128 => 2,
                crypto_layer::common::crypto::algorithms::encryption::Cipher::AesCbc256 => 3,
                crypto_layer::common::crypto::algorithms::encryption::Cipher::ChaCha20Poly1305 => 4,
                crypto_layer::common::crypto::algorithms::encryption::Cipher::XChaCha20Poly1305 => {
                    5
                }
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crypto_layer::common::crypto::algorithms::hashes::CryptoHash {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_224 => 0,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_256 => 1,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_384 => 2,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512 => 3,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_224 => 4,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha2_512_256 => 5,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_224 => 6,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_256 => 7,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_384 => 8,
                crypto_layer::common::crypto::algorithms::hashes::CryptoHash::Sha3_512 => 9,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_i64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crypto_layer::common::config::KeyPairSpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>::sse_encode(
            self.asym_spec,
            serializer,
        );
        <Option<crypto_layer::common::crypto::algorithms::encryption::Cipher>>::sse_encode(
            self.cipher,
            serializer,
        );
        <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_encode(
            self.signing_hash,
            serializer,
        );
        <bool>::sse_encode(self.ephemeral, serializer);
        <bool>::sse_encode(self.non_exportable, serializer);
    }
}

impl SseEncode for crypto_layer::common::config::KeySpec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_encode(
            self.cipher,
            serializer,
        );
        <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_encode(
            self.signing_hash,
            serializer,
        );
        <bool>::sse_encode(self.ephemeral, serializer);
    }
}

impl SseEncode for crypto_layer::common::error::KeyType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crypto_layer::common::error::KeyType::Public => 0,
                crypto_layer::common::error::KeyType::Private => 1,
                crypto_layer::common::error::KeyType::PublicAndPrivate => 2,
                crypto_layer::common::error::KeyType::Symmetric => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crypto_layer::common::config::AdditionalConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crypto_layer::common::config::AdditionalConfig>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crypto_layer::common::crypto::algorithms::encryption::Cipher> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crypto_layer::common::crypto::algorithms::hashes::CryptoHash> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crypto_layer::common::crypto::algorithms::hashes::CryptoHash>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crypto_layer::common::config::ProviderConfig)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crypto_layer::common::config::ProviderConfig)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crypto_layer::common::config::Spec)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crypto_layer::common::config::Spec)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crypto_layer::common::crypto::pkcs::standards::OidType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crypto_layer::common::crypto::pkcs::standards::OidType::Sha1WithRsaEncryption => { 0 }
crypto_layer::common::crypto::pkcs::standards::OidType::Sha256WithRsaEncryption => { 1 }
crypto_layer::common::crypto::pkcs::standards::OidType::Sha384WithRsaEncryption => { 2 }
crypto_layer::common::crypto::pkcs::standards::OidType::Sha512WithRsaEncryption => { 3 }
crypto_layer::common::crypto::pkcs::standards::OidType::IdSha1 => { 4 }
crypto_layer::common::crypto::pkcs::standards::OidType::IdSha256 => { 5 }
crypto_layer::common::crypto::pkcs::standards::OidType::IdSha384 => { 6 }
crypto_layer::common::crypto::pkcs::standards::OidType::IdSha512 => { 7 }
crypto_layer::common::crypto::pkcs::standards::OidType::RsaEncryption => { 8 }
crypto_layer::common::crypto::pkcs::standards::OidType::IdRsaSsaPss => { 9 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcPublicKey => { 10 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha1 => { 11 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha256 => { 12 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha384 => { 13 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdsaWithSha512 => { 14 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Cbc => { 15 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Cbc => { 16 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Cbc => { 17 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes128Gcm => { 18 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes192Gcm => { 19 }
crypto_layer::common::crypto::pkcs::standards::OidType::Aes256Gcm => { 20 }
crypto_layer::common::crypto::pkcs::standards::OidType::DhPublicNumber => { 21 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdhStandardCurves => { 22 }
crypto_layer::common::crypto::pkcs::standards::OidType::EcdhSpecifiedCurves => { 23 }
crypto_layer::common::crypto::pkcs::standards::OidType::SubjectKeyIdentifier => { 24 }
crypto_layer::common::crypto::pkcs::standards::OidType::KeyUsage => { 25 }
crypto_layer::common::crypto::pkcs::standards::OidType::SubjectAltName => { 26 }
crypto_layer::common::crypto::pkcs::standards::OidType::BasicConstraints => { 27 }
crypto_layer::common::crypto::pkcs::standards::OidType::ExtendedKeyUsage => { 28 }
crypto_layer::common::crypto::pkcs::standards::OidType::ServerAuth => { 29 }
crypto_layer::common::crypto::pkcs::standards::OidType::ClientAuth => { 30 }
crypto_layer::common::crypto::pkcs::standards::OidType::CodeSigning => { 31 }
crypto_layer::common::crypto::pkcs::standards::OidType::EmailProtection => { 32 }
crypto_layer::common::crypto::pkcs::standards::OidType::TimeStamping => { 33 }
crypto_layer::common::crypto::pkcs::standards::OidType::OcspSigning => { 34 }
crypto_layer::common::crypto::pkcs::standards::OidType::DocumentSigning => { 35 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkix => { 36 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7Data => { 37 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedData => { 38 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EnvelopedData => { 39 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7SignedAndEnvelopedData => { 40 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7DigestData => { 41 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs7EncryptedData => { 42 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9EmailAddress => { 43 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9UnstructuredName => { 44 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9ContentType => { 45 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9MessageDigest => { 46 }
crypto_layer::common::crypto::pkcs::standards::OidType::Pkcs9SigningTime => { 47 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for Option<Provider> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Provider>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crypto_layer::common::crypto::algorithms::encryption::Cipher> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crypto_layer::common::crypto::algorithms::encryption::Cipher>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crypto_layer::common::config::ProviderConfig> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crypto_layer::common::config::ProviderConfig>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crypto_layer::common::config::ProviderConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crypto_layer::common::config::SecurityLevel>::sse_encode(
            self.max_security_level,
            serializer,
        );
        <crypto_layer::common::config::SecurityLevel>::sse_encode(
            self.min_security_level,
            serializer,
        );
        <std::collections::HashSet<crypto_layer::common::crypto::algorithms::encryption::Cipher>>::sse_encode(self.supported_ciphers, serializer);
        <std::collections::HashSet<crypto_layer::common::crypto::algorithms::hashes::CryptoHash>>::sse_encode(self.supported_hashes, serializer);
        <std::collections::HashSet<
            crypto_layer::common::crypto::algorithms::encryption::AsymmetricKeySpec,
        >>::sse_encode(self.supported_asym_spec, serializer);
    }
}

impl SseEncode for crypto_layer::common::config::ProviderImplConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crypto_layer::common::config::AdditionalConfig>>::sse_encode(
            self.additional_config,
            serializer,
        );
    }
}

impl SseEncode for (Vec<u8>, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.0, serializer);
        <Vec<u8>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crypto_layer::common::config::ProviderConfig) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crypto_layer::common::config::ProviderConfig>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crypto_layer::common::config::Spec) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crypto_layer::common::config::Spec>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crypto_layer::common::config::SecurityLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crypto_layer::common::config::SecurityLevel::Hardware => 0,
                crypto_layer::common::config::SecurityLevel::Software => 1,
                crypto_layer::common::config::SecurityLevel::Network => 2,
                crypto_layer::common::config::SecurityLevel::Unsafe => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crypto_layer::common::config::Spec {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crypto_layer::common::config::Spec::KeySpec(field0) => {
                <i32>::sse_encode(0, serializer);
                <crypto_layer::common::config::KeySpec>::sse_encode(field0, serializer);
            }
            crypto_layer::common::config::Spec::KeyPairSpec(field0) => {
                <i32>::sse_encode(1, serializer);
                <crypto_layer::common::config::KeyPairSpec>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crypto_layer::common::T {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use crate::*;
    use crypto_layer::common::error::*;
    use crypto_layer::common::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnDynFutureVecStringSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnDynFutureVecStringSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDynFutureOptionVecu8SendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDynFutureOptionVecu8SendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringPinBoxdynFutureOutputSendSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringPinBoxdynFutureOutputSendSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringVecu8DynFutureboolSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringVecu8DynFutureboolSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_cal_flutter_plugin_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.8.0.

    // Section: imports

    use super::*;
    use crate::*;
    use crypto_layer::common::error::*;
    use crypto_layer::common::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnDynFutureVecStringSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnDynFutureVecStringSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn() -> DynFuture<Vec<String>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDynFutureOptionVecu8SendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringDynFutureOptionVecu8SendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> DynFuture<Option<Vec<u8>>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringPinBoxdynFutureOutputSendSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringPinBoxdynFutureOutputSendSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String) -> Pin<Box<dyn Future<Output = ()> + Send>> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringVecu8DynFutureboolSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynFnStringVecu8DynFutureboolSendSync(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<
                Arc<dyn Fn(String, Vec<u8>) -> DynFuture<bool> + Send + Sync>,
            >,
        >::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CalError>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DHExchange>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyHandle>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<KeyPairHandle>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
