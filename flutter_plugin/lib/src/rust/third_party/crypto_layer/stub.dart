// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'common/config.dart';
import 'common/crypto/algorithms.dart';
import 'common/crypto/algorithms/encryption.dart';
import 'common/crypto/algorithms/hashes.dart';
import 'common/traits/module_provider.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'tpm/android/wrapper/key_store/cipher/jni.dart';

// These types are ignored because they are not used by any `pub` functions: `StubKeyPairHandle`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `decrypt_data`, `encrypt_data`, `extract_key`, `get_public_key`, `sign_data`, `start_dh_exchange`, `verify_signature`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `import_key_pair`, `import_key`, `import_public_key`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StubProvider>>
abstract class StubProvider implements RustOpaqueInterface, ProviderImpl {
  Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>
      createKey({required KeySpec spec});

  Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>
      createKeyPair({required KeyPairSpec spec});

  Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>
      loadKey({required String id});

  Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>
      loadKeyPair({required String id});

  Future<String> providerName();

  Future<PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait>
      startEphemeralDhExchange({required KeyPairSpec spec});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StubProviderFactory>>
abstract class StubProviderFactory
    implements RustOpaqueInterface, ProviderFactory {
  Future<PinBoxFutureOutputBoxProviderImplAsyncTrait> createProvider(
      {required ProviderImplConfig implConfig});

  Future<PinBoxFutureOutputProviderConfigAsyncTrait> getCapabilities(
      {required ProviderImplConfig implConfig});

  Future<String> getName();
}
