// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../../../lib.dart';
import '../../tpm/android/wrapper/key_store/cipher/jni.dart';
import '../config.dart';
import '../crypto/algorithms.dart';
import '../crypto/algorithms/encryption.dart';
import '../crypto/algorithms/hashes.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `import_key_pair`, `import_key`, `import_public_key`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Box < dyn ProviderImpl > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputBoxProviderImplAsyncTrait
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = ProviderConfig > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputProviderConfigAsyncTrait
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Result < DHExchange , SecurityModuleError > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Result < KeyHandle , SecurityModuleError > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Result < KeyPairHandle , SecurityModuleError > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait
    implements RustOpaqueInterface {}

abstract class ProviderFactory {
  Future<PinBoxFutureOutputBoxProviderImplAsyncTrait> createProvider(
      {required ProviderImplConfig implConfig});

  /// Returns security level and supported algorithms of a provider.
  ///
  /// [ProviderConfig] returned stores in HashSets all Hashes, Ciphers and AsymmetricKeySpecs a provider supports.
  Future<PinBoxFutureOutputProviderConfigAsyncTrait> getCapabilities(
      {required ProviderImplConfig implConfig});

  Future<String> getName();
}

abstract class ProviderImpl {
  /// Creates a new symmetric key identified by `key_id`.
  ///
  /// # Arguments
  ///
  /// * `key_id` - A string slice that uniquely identifies the key to be created.
  /// * `spec` - The key specification.
  ///
  /// # Returns
  ///
  /// A `Result` that, on success, contains a `KeyHandle`, allowing further operations with this key.
  /// On failure, it returns a `SecurityModuleError`.
  Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>
      createKey({required KeySpec spec});

  /// Creates a new asymmetric key pair identified by `key_id`.
  ///
  /// # Arguments
  ///
  /// * `key_id` - A string slice that uniquely identifies the keypair to be created.
  /// * `spec` - The key specification.
  ///
  /// # Returns
  ///
  /// A `Result` that, on success, contains a `KeyPairHandle`, allowing further operations with this key pair.
  /// On failure, it returns a `SecurityModuleError`.
  Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>
      createKeyPair({required KeyPairSpec spec});

  /// Loads an existing symmetric key identified by `key_id`.
  ///
  /// # Arguments
  ///
  /// * `key_id` - A string slice that uniquely identifies the key to be loaded.
  /// * `spec` - The key specification.
  ///
  /// # Returns
  ///
  /// A `Result` that, on success, contains a `KeyHandle`, allowing further operations with this key.
  /// On failure, it returns a `SecurityModuleError`.
  Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>
      loadKey({required String keyId});

  /// Loads an existing asymmetric keypair identified by `key_id`.
  ///
  /// # Arguments
  ///
  /// * `key_id` - A string slice that uniquely identifies the keypair to be loaded.
  /// * `spec` - The key specification.
  ///
  /// # Returns
  ///
  /// A `Result` that, on success, contains a `KeyPairHandle`, allowing further operations with this key pair.
  /// On failure, it returns a `SecurityModuleError`.
  Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>
      loadKeyPair({required String keyId});

  Future<String> providerName();

  /// Generates a key pair suited for a Diffie-Hellman Key Exchange
  ///
  /// # Arguments
  ///
  /// * `spec` - A specification for the exchange process and resulting symmetric key
  ///
  /// # Returns
  ///
  /// A `Result` that, on success, contains a `DHExchange`, allowing further operations with this key pair.
  /// On failure, it returns a `SecurityModuleError`.
  Future<PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait>
      startEphemeralDhExchange({required KeyPairSpec spec});
}
