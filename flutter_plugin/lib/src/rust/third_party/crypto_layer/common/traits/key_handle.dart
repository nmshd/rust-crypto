// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import '../../common.dart';
import '../error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `add_external`, `decrypt_data`, `decrypt_data`, `encrypt_data`, `encrypt_data`, `sign_data`, `verify_signature`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Result < Box < dyn KeyHandleImpl > , SecurityModuleError > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<:: Pin < Box < Future < Output = Result < Vec < u8 > , SecurityModuleError > > + Send + 'async_trait > >>>
abstract class PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait
    implements RustOpaqueInterface {}

abstract class DHKeyExchangeImpl {
  /// add the final external Keypair, derive a symmetric key from the shared secret and store the key
  Future<PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait>
      addExternalFinal({required List<int> externalKey});

  /// Get the public key of the internal key pair to use for the other party
  Future<PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait>
      getPublicKey();
}

abstract class KeyHandleImpl {
  Future<PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait>
      extractKey();
}

abstract class KeyPairHandleImpl {
  Future<PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait>
      extractKey();

  Future<PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait>
      getPublicKey();

  Future<DHExchange> startDhExchange();
}
