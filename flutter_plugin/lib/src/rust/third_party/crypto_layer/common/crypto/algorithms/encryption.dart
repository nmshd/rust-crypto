// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `from_str`, `from_str`, `from`, `from`, `from`, `from`, `hash`, `hash`, `try_from`, `try_from`

/// Represents the available encryption algorithms.
///
/// This enum provides a C-compatible representation of different encryption
/// methods supported by the system, including asymmetric algorithms like RSA and ECC.
/// It is designed to be extensible, allowing for the addition
/// of more encryption algorithms in the future.
///
/// # Note
///
/// This enum uses `#[repr(C)]` to ensure that it has the same memory layout as a C enum,
/// facilitating interfacing with C code or when ABI compatibility is required.
/// flutter_rust_bridge:non_opaque
enum AsymmetricKeySpec {
  rsa1024,
  rsa2048,
  rsa3072,
  rsa4096,
  rsa8192,
  p256,
  p384,
  p521,

  /// `secp256k1` curve, commonly used in blockchain technologies.
  secp256K1,

  /// Brainpool `P256r1` curve.
  brainpoolP256R1,

  /// Brainpool `P384r1` curve.
  brainpoolP384R1,

  /// Brainpool `P512r1` curve.
  brainpoolP512R1,

  /// Brainpool `P638` curve.
  brainpoolP638,

  /// `Curve25519`, popular for its security and performance.
  curve25519,

  /// `Curve448`, known for high security and efficiency.
  curve448,

  /// `FRP256v1`, a French curve providing strong security and performance.
  frp256V1,
  ;

  static Future<AsymmetricKeySpec> default_() => RustLib.instance.api
      .cryptoLayerCommonCryptoAlgorithmsEncryptionAsymmetricKeySpecDefault();
}

/// Represents the available cipher algorithms.
///
/// This enum provides a C-compatible representation of various algorithms supported,
/// including `AES`, `ChaCha20` variants, `Triple DES`, `DES`, `RC2`, and `Camellia`. Some algorithms can be configured with specific modes of operation and key sizes.
/// It is designed for flexibility, allowing for easy extension to include additional cipher algorithms.
/// Stream ciphers encrypt plaintext one bit or byte at a time, offering different security and performance characteristics compared to block ciphers.
/// `XChaCha20` is the recommended stream cipher for new applications due to its strong security profile.
///
/// # Note
///
/// Marked with `#[repr(C)]` to ensure it has the same memory layout as a C enum,
/// facilitating ABI compatibility and interfacing with C code.
/// flutter_rust_bridge:non_opaque
enum Cipher {
  aesGcm128,
  aesGcm256,
  aesCbc128,
  aesCbc256,
  chaCha20Poly1305,
  xChaCha20Poly1305,
  ;

  static Future<Cipher> default_() => RustLib.instance.api
      .cryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefault();
}
