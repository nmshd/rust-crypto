// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ObjectIdentifiers`, `PkcsType`, `PkiStandards`, `X509Type`

/// Enumerates specific Object Identifier (OID) types across cryptographic functionalities.
///
/// Lists OIDs for hashing algorithms, public key cryptography, encryption algorithms,
/// key agreement protocols, certificate extensions, extended key usage identifiers, and
/// other notable OIDs.
///
/// # Hashing Algorithms
/// - `Sha1WithRsaEncryption`, `Sha256WithRsaEncryption`, etc.
///
/// # Public Key Cryptography
/// - `RsaEncryption`, `EcPublicKey`, `EcdsaWithSha*`
///
/// # Encryption Algorithms
/// - `Aes128Cbc`, `Aes256Gcm`, etc.
///
/// # Key Agreement
/// - `DhPublicNumber`, `EcdhStandardCurves`
///
/// # Certificate Extensions
/// - `SubjectKeyIdentifier`, `ExtendedKeyUsage`, etc.
///
/// # Extended Key Usage OIDs
/// - `ServerAuth`, `ClientAuth`, `CodeSigning`, etc.
///
/// # Other notable OIDs
/// - `Pkix`, `Pkcs7Data`, `Pkcs9EmailAddress`, etc.
///
/// # Examples
///
/// Selecting an OID for AES 256 CBC encryption:
///
/// ```rust
/// use crypto_layer::common::crypto::pkcs::standards::OidType;
///
/// let oid_type = OidType::Aes256Cbc;
/// ```
///
/// # Note
///
/// Uses `#[repr(C)]` for C language compatibility. Understanding and using the correct OIDs
/// is essential for ensuring cryptographic operations adhere to the intended standards and
/// protocols.
enum OidType {
  sha1WithRsaEncryption,
  sha256WithRsaEncryption,
  sha384WithRsaEncryption,
  sha512WithRsaEncryption,
  idSha1,
  idSha256,
  idSha384,
  idSha512,
  rsaEncryption,
  idRsaSsaPss,
  ecPublicKey,
  ecdsaWithSha1,
  ecdsaWithSha256,
  ecdsaWithSha384,
  ecdsaWithSha512,
  aes128Cbc,
  aes192Cbc,
  aes256Cbc,
  aes128Gcm,
  aes192Gcm,
  aes256Gcm,
  dhPublicNumber,
  ecdhStandardCurves,
  ecdhSpecifiedCurves,
  subjectKeyIdentifier,
  keyUsage,
  subjectAltName,
  basicConstraints,
  extendedKeyUsage,
  serverAuth,
  clientAuth,
  codeSigning,
  emailProtection,
  timeStamping,
  ocspSigning,
  documentSigning,
  pkix,
  pkcs7Data,
  pkcs7SignedData,
  pkcs7EnvelopedData,
  pkcs7SignedAndEnvelopedData,
  pkcs7DigestData,
  pkcs7EncryptedData,
  pkcs9EmailAddress,
  pkcs9UnstructuredName,
  pkcs9ContentType,
  pkcs9MessageDigest,
  pkcs9SigningTime,
  ;

  Future<void> asStr() =>
      RustLib.instance.api.cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr(
        that: this,
      );
}
