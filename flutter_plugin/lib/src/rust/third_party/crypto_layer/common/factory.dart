// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import '../common.dart';
import 'config.dart';
import 'crypto/algorithms/encryption.dart';
import 'crypto/algorithms/hashes.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Returns a provider which supports the given requierements.
///
/// This function returns the first provider, which supports the given requirements and has a [`ProviderImplConfig`].
///
/// * `conf` - A provider config that the provider must at least contain.
/// * `impl_conf_vec` - A `Vec` of [`ProviderImplConfig`]. Only providers, which have [`ProviderImplConfig`] are returned.
///
/// # Example
/// ```
/// use std::collections::HashSet;
///
/// use crypto_layer::common::{
///     config::*,
///     factory::*,
/// };
///
/// let specific_provider_config = ProviderImplConfig{additional_config: vec![]};
/// let provider_config = ProviderConfig {
///     min_security_level: SecurityLevel::Software,
///     max_security_level: SecurityLevel::Hardware,
///     supported_asym_spec: HashSet::new(),
///     supported_ciphers: HashSet::new(),
///     supported_hashes: HashSet::new(),
/// };
/// let provider = create_provider(&provider_config, specific_provider_config).unwrap();
/// ```
Future<Provider?> createProvider(
        {required ProviderConfig conf, required ProviderImplConfig implConf}) =>
    RustLib.instance.api
        .cryptoLayerCommonFactoryCreateProvider(conf: conf, implConf: implConf);

/// Returns the provider matching the given name.
///
/// * `name` - Name of the provider. See `get_name()`.
/// * `impl_config` - Specif configuration for said provider.
Future<Provider?> createProviderFromName(
        {required String name, required ProviderImplConfig implConf}) =>
    RustLib.instance.api.cryptoLayerCommonFactoryCreateProviderFromName(
        name: name, implConf: implConf);

/// Returns the names of all available providers.
Future<List<String>> getAllProviders() =>
    RustLib.instance.api.cryptoLayerCommonFactoryGetAllProviders();

/// Returns the names and capabilities of all providers that can be initialized with the given [ProviderImplConfig].
Future<List<(String, ProviderConfig)>> getProviderCapabilities(
        {required ProviderImplConfig implConfig}) =>
    RustLib.instance.api.cryptoLayerCommonFactoryGetProviderCapabilities(
        implConfig: implConfig);
