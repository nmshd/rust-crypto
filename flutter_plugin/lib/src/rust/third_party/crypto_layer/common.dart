// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'common/config.dart';
import 'common/crypto/algorithms.dart';
import 'common/crypto/algorithms/encryption.dart';
import 'common/crypto/algorithms/hashes.dart';
import 'common/error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'tpm/android/wrapper/key_store/cipher/jni.dart';

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn ProviderImpl >>>
abstract class BoxProviderImpl implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Provider>>
abstract class Provider implements RustOpaqueInterface {
  BoxProviderImpl get implementation;

  set implementation(BoxProviderImpl implementation);

  Future<KeyHandle> createKey({required KeySpec spec});

  Future<KeyPairHandle> createKeyPair({required KeyPairSpec spec});

  Future<KeyHandle> importKey({required KeySpec spec, required List<int> data});

  Future<KeyPairHandle> importKeyPair(
      {required KeyPairSpec spec,
      required List<int> publicKey,
      required List<int> privateKey});

  Future<KeyPairHandle> importPublicKey(
      {required KeyPairSpec spec, required List<int> publicKey});

  Future<KeyHandle> loadKey({required String id});

  Future<KeyPairHandle> loadKeyPair({required String id});

  Future<String> providerName();

  Future<DHExchange> startEphemeralDhExchange({required KeyPairSpec spec});
}

class DHExchange {
  final DHKeyExchangeImpl implementation;

  const DHExchange({
    required this.implementation,
  });

  @override
  int get hashCode => implementation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DHExchange &&
          runtimeType == other.runtimeType &&
          implementation == other.implementation;
}

class KeyHandle {
  final KeyHandleImpl implementation;

  const KeyHandle({
    required this.implementation,
  });

  Future<Uint8List> decryptData({required List<int> encryptedData}) =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleDecryptData(
          that: this, encryptedData: encryptedData);

  Future<Uint8List> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyHandleEncryptData(that: this, data: data);

  Future<Uint8List> extractKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleExtractKey(
        that: this,
      );

  @override
  int get hashCode => implementation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KeyHandle &&
          runtimeType == other.runtimeType &&
          implementation == other.implementation;
}

class KeyPairHandle {
  final KeyPairHandleImpl implementation;

  const KeyPairHandle({
    required this.implementation,
  });

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> decryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleDecryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleEncryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> getPublicKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleGetPublicKey(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> signData({required List<int> data}) => RustLib.instance.api
      .cryptoLayerCommonKeyPairHandleSignData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<bool> verifySignature(
          {required List<int> data, required List<int> signature}) =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleVerifySignature(
          that: this, data: data, signature: signature);

  @override
  int get hashCode => implementation.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KeyPairHandle &&
          runtimeType == other.runtimeType &&
          implementation == other.implementation;
}
