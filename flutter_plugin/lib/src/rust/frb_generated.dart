// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/crypto.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/crypto_layer/common.dart';
import 'third_party/crypto_layer/common/config.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/encryption.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/hashes.dart';
import 'third_party/crypto_layer/common/crypto/pkcs/standards.dart';
import 'third_party/crypto_layer/common/error.dart';
import 'third_party/crypto_layer/common/factory.dart';
import 'third_party/crypto_layer/tpm/core/error.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => -1970470241;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'cal_flutter_plugin',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<KeyPairHandle> crateApiCryptoCreateKeyPair(
      {required Provider provider});

  Future<Provider> crateApiCryptoGetProvider();

  Future<Uint8List> crateApiCryptoSign(
      {required KeyPairHandle keyPairHandle, required List<int> data});

  Future<bool> crateApiCryptoVerify(
      {required KeyPairHandle keyPairHandle,
      required List<int> data,
      required List<int> signature});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData(
      {required KeyHandle that, required List<int> encryptedData});

  Future<Uint8List> cryptoLayerCommonKeyHandleEncryptData(
      {required KeyHandle that, required List<int> data});

  Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey(
      {required KeyHandle that});

  Future<String> cryptoLayerCommonKeyHandleId({required KeyHandle that});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData(
      {required KeyPairHandle that, required List<int> data});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData(
      {required KeyPairHandle that, required List<int> data});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey(
      {required KeyPairHandle that});

  Future<String> cryptoLayerCommonKeyPairHandleId(
      {required KeyPairHandle that});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData(
      {required KeyPairHandle that, required List<int> data});

  Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature(
      {required KeyPairHandle that,
      required List<int> data,
      required List<int> signature});

  Future<KeyHandle> cryptoLayerCommonProviderCreateKey(
      {required Provider that, required KeySpec spec});

  Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair(
      {required Provider that, required KeyPairSpec spec});

  Future<KeyHandle> cryptoLayerCommonProviderImportKey(
      {required Provider that, required KeySpec spec, required List<int> data});

  Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey,
      required List<int> privateKey});

  Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey});

  Future<KeyHandle> cryptoLayerCommonProviderLoadKey(
      {required Provider that, required String id});

  Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair(
      {required Provider that, required String id});

  Future<String> cryptoLayerCommonProviderProviderName(
      {required Provider that});

  Future<DhExchange> cryptoLayerCommonProviderStartEphemeralDhExchange(
      {required Provider that, required KeyPairSpec spec});

  AsymmetricKeySpec cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetAsymSpec(
      {required KeyPairSpec that});

  Cipher? cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetCipher(
      {required KeyPairSpec that});

  CryptoHash cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetSigningHash(
      {required KeyPairSpec that});

  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetAsymSpec(
      {required KeyPairSpec that, required AsymmetricKeySpec asymSpec});

  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetCipher(
      {required KeyPairSpec that, Cipher? cipher});

  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetSigningHash(
      {required KeyPairSpec that, required CryptoHash signingHash});

  Cipher cryptoLayerCommonConfigKeySpecAutoAccessorGetCipher(
      {required KeySpec that});

  CryptoHash cryptoLayerCommonConfigKeySpecAutoAccessorGetSigningHash(
      {required KeySpec that});

  void cryptoLayerCommonConfigKeySpecAutoAccessorSetCipher(
      {required KeySpec that, required Cipher cipher});

  void cryptoLayerCommonConfigKeySpecAutoAccessorSetSigningHash(
      {required KeySpec that, required CryptoHash signingHash});

  Future<Cipher> cryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefault();

  Future<EccCurve> cryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefault();

  Future<SymmetricMode>
      cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault();

  Future<CryptoHash> cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault();

  Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr(
      {required OidType that});

  Future<Provider?> cryptoLayerCommonFactoryCreateProvider(
      {required ProviderConfig conf,
      required List<ProviderImplConfig> implConfVec});

  Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName(
      {required String name, required ProviderImplConfig implConf});

  Future<String> cryptoLayerTpmCoreErrorTpmErrorDescription(
      {required TpmError that});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsymmetricKeySpec;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsymmetricKeySpec;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AsymmetricKeySpecPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Cipher;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Cipher;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CipherPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CryptoHash;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CryptoHash;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CryptoHashPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DhExchange;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DhExchange;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DhExchangePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_KeyPairHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairSpec;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairSpec;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyPairSpecPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_KeySpec;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_KeySpec;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeySpecPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Provider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Provider;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProviderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProviderImplConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProviderImplConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProviderImplConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecurityModuleError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecurityModuleError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SecurityModuleErrorPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TpmError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TpmError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TpmErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<KeyPairHandle> crateApiCryptoCreateKeyPair(
      {required Provider provider}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            provider, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCrateApiCryptoCreateKeyPairConstMeta,
      argValues: [provider],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoCreateKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "create_key_pair",
        argNames: ["provider"],
      );

  @override
  Future<Provider> crateApiCryptoGetProvider() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCryptoGetProviderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoGetProviderConstMeta => const TaskConstMeta(
        debugName: "get_provider",
        argNames: [],
      );

  @override
  Future<Uint8List> crateApiCryptoSign(
      {required KeyPairHandle keyPairHandle, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            keyPairHandle, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCrateApiCryptoSignConstMeta,
      argValues: [keyPairHandle, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoSignConstMeta => const TaskConstMeta(
        debugName: "sign",
        argNames: ["keyPairHandle", "data"],
      );

  @override
  Future<bool> crateApiCryptoVerify(
      {required KeyPairHandle keyPairHandle,
      required List<int> data,
      required List<int> signature}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            keyPairHandle, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_list_prim_u_8_loose(signature, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCrateApiCryptoVerifyConstMeta,
      argValues: [keyPairHandle, data, signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoVerifyConstMeta => const TaskConstMeta(
        debugName: "verify",
        argNames: ["keyPairHandle", "data", "signature"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData(
      {required KeyHandle that, required List<int> encryptedData}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(encryptedData, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleDecryptDataConstMeta,
      argValues: [that, encryptedData],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleDecryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_decrypt_data",
        argNames: ["that", "encryptedData"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyHandleEncryptData(
      {required KeyHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleEncryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleEncryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_encrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey(
      {required KeyHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleExtractKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleExtractKeyConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_extract_key",
        argNames: ["that"],
      );

  @override
  Future<String> cryptoLayerCommonKeyHandleId({required KeyHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleIdConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_id",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_decrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_encrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey(
      {required KeyPairHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_get_public_key",
        argNames: ["that"],
      );

  @override
  Future<String> cryptoLayerCommonKeyPairHandleId(
      {required KeyPairHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleIdConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_id",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleSignDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleSignDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_sign_data",
        argNames: ["that", "data"],
      );

  @override
  Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature(
      {required KeyPairHandle that,
      required List<int> data,
      required List<int> signature}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_list_prim_u_8_loose(signature, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta,
      argValues: [that, data, signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_verify_signature",
        argNames: ["that", "data", "signature"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderCreateKey(
      {required Provider that, required KeySpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderCreateKeyConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderCreateKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_create_key",
        argNames: ["that", "spec"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair(
      {required Provider that, required KeyPairSpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderCreateKeyPairConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderCreateKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_create_key_pair",
        argNames: ["that", "spec"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderImportKey(
      {required Provider that,
      required KeySpec spec,
      required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            spec, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderImportKeyConstMeta,
      argValues: [that, spec, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_key",
        argNames: ["that", "spec", "data"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey,
      required List<int> privateKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            spec, serializer);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        sse_encode_list_prim_u_8_loose(privateKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderImportKeyPairConstMeta,
      argValues: [that, spec, publicKey, privateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_key_pair",
        argNames: ["that", "spec", "publicKey", "privateKey"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            spec, serializer);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderImportPublicKeyConstMeta,
      argValues: [that, spec, publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_public_key",
        argNames: ["that", "spec", "publicKey"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderLoadKey(
      {required Provider that, required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderLoadKeyConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderLoadKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_load_key",
        argNames: ["that", "id"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair(
      {required Provider that, required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderLoadKeyPairConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderLoadKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_load_key_pair",
        argNames: ["that", "id"],
      );

  @override
  Future<String> cryptoLayerCommonProviderProviderName(
      {required Provider that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonProviderProviderNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderProviderNameConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_provider_name",
        argNames: ["that"],
      );

  @override
  Future<DhExchange> cryptoLayerCommonProviderStartEphemeralDhExchange(
      {required Provider that, required KeyPairSpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
      ),
      constMeta: kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta =>
          const TaskConstMeta(
            debugName: "Provider_start_ephemeral_dh_exchange",
            argNames: ["that", "spec"],
          );

  @override
  AsymmetricKeySpec cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetAsymSpec(
      {required KeyPairSpec that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetAsymSpecConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetAsymSpecConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_get_asym_spec",
            argNames: ["that"],
          );

  @override
  Cipher? cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetCipher(
      {required KeyPairSpec that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetCipherConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetCipherConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_get_cipher",
            argNames: ["that"],
          );

  @override
  CryptoHash cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetSigningHash(
      {required KeyPairSpec that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetSigningHashConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorGetSigningHashConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_get_signing_hash",
            argNames: ["that"],
          );

  @override
  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetAsymSpec(
      {required KeyPairSpec that, required AsymmetricKeySpec asymSpec}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
            asymSpec, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetAsymSpecConstMeta,
      argValues: [that, asymSpec],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetAsymSpecConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_set_asym_spec",
            argNames: ["that", "asymSpec"],
          );

  @override
  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetCipher(
      {required KeyPairSpec that, Cipher? cipher}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            cipher, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetCipherConstMeta,
      argValues: [that, cipher],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetCipherConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_set_cipher",
            argNames: ["that", "cipher"],
          );

  @override
  void cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetSigningHash(
      {required KeyPairSpec that, required CryptoHash signingHash}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
            signingHash, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetSigningHashConstMeta,
      argValues: [that, signingHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeyPairSpecAutoAccessorSetSigningHashConstMeta =>
          const TaskConstMeta(
            debugName: "KeyPairSpec_auto_accessor_set_signing_hash",
            argNames: ["that", "signingHash"],
          );

  @override
  Cipher cryptoLayerCommonConfigKeySpecAutoAccessorGetCipher(
      {required KeySpec that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonConfigKeySpecAutoAccessorGetCipherConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeySpecAutoAccessorGetCipherConstMeta =>
          const TaskConstMeta(
            debugName: "KeySpec_auto_accessor_get_cipher",
            argNames: ["that"],
          );

  @override
  CryptoHash cryptoLayerCommonConfigKeySpecAutoAccessorGetSigningHash(
      {required KeySpec that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeySpecAutoAccessorGetSigningHashConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeySpecAutoAccessorGetSigningHashConstMeta =>
          const TaskConstMeta(
            debugName: "KeySpec_auto_accessor_get_signing_hash",
            argNames: ["that"],
          );

  @override
  void cryptoLayerCommonConfigKeySpecAutoAccessorSetCipher(
      {required KeySpec that, required Cipher cipher}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            cipher, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonConfigKeySpecAutoAccessorSetCipherConstMeta,
      argValues: [that, cipher],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeySpecAutoAccessorSetCipherConstMeta =>
          const TaskConstMeta(
            debugName: "KeySpec_auto_accessor_set_cipher",
            argNames: ["that", "cipher"],
          );

  @override
  void cryptoLayerCommonConfigKeySpecAutoAccessorSetSigningHash(
      {required KeySpec that, required CryptoHash signingHash}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
            signingHash, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonConfigKeySpecAutoAccessorSetSigningHashConstMeta,
      argValues: [that, signingHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonConfigKeySpecAutoAccessorSetSigningHashConstMeta =>
          const TaskConstMeta(
            debugName: "KeySpec_auto_accessor_set_signing_hash",
            argNames: ["that", "signingHash"],
          );

  @override
  Future<Cipher> cryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "Cipher_default",
            argNames: [],
          );

  @override
  Future<EccCurve>
      cryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ecc_curve,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "ecc_curve_default",
            argNames: [],
          );

  @override
  Future<SymmetricMode>
      cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_symmetric_mode,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "symmetric_mode_default",
            argNames: [],
          );

  @override
  Future<CryptoHash>
      cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "CryptoHash_default",
            argNames: [],
          );

  @override
  Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr(
      {required OidType that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_oid_type(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta =>
          const TaskConstMeta(
            debugName: "oid_type_as_str",
            argNames: ["that"],
          );

  @override
  Future<Provider?> cryptoLayerCommonFactoryCreateProvider(
      {required ProviderConfig conf,
      required List<ProviderImplConfig> implConfVec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_provider_config(conf, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
            implConfVec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonFactoryCreateProviderConstMeta,
      argValues: [conf, implConfVec],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderConstMeta =>
      const TaskConstMeta(
        debugName: "create_provider",
        argNames: ["conf", "implConfVec"],
      );

  @override
  Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName(
      {required String name, required ProviderImplConfig implConf}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
            implConf, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta,
      argValues: [name, implConf],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta =>
      const TaskConstMeta(
        debugName: "create_provider_from_name",
        argNames: ["name", "implConf"],
      );

  @override
  Future<String> cryptoLayerTpmCoreErrorTpmErrorDescription(
      {required TpmError that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerTpmCoreErrorTpmErrorDescriptionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerTpmCoreErrorTpmErrorDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "TpmError_description",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AsymmetricKeySpec => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AsymmetricKeySpec => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Cipher => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Cipher => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CryptoHash => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CryptoHash => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DhExchange => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DhExchange => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairSpec => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairSpec => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeySpec => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeySpec => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Provider => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Provider => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProviderImplConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProviderImplConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SecurityModuleError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SecurityModuleError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TpmError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TpmError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError;

  @protected
  AsymmetricKeySpec
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsymmetricKeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Cipher
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CipherImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CryptoHash
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CryptoHashImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DhExchange
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DhExchangeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairSpec
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeySpec
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProviderImplConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecurityModuleError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecurityModuleErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TpmError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairSpec
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeySpec
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairSpec
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeySpec
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TpmError
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AsymmetricKeySpec
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AsymmetricKeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Cipher
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CipherImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CryptoHash
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CryptoHashImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DhExchange
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DhExchangeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairSpec
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeySpec
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeySpecImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProviderImplConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SecurityModuleError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecurityModuleErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TpmError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<AsymmetricKeySpec>
      dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(
        dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
            raw));
  }

  @protected
  Set<Cipher>
      dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(
        dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            raw));
  }

  @protected
  Set<CryptoHash>
      dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(
        dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
            raw));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ToTpmError dco_decode_TraitDef_ToTpmError(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Cipher
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
        raw);
  }

  @protected
  Provider
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        raw);
  }

  @protected
  ProviderConfig dco_decode_box_autoadd_provider_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_provider_config(raw);
  }

  @protected
  EccCurve dco_decode_ecc_curve(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EccCurve.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<AsymmetricKeySpec>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec)
        .toList();
  }

  @protected
  List<Cipher>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher)
        .toList();
  }

  @protected
  List<CryptoHash>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash)
        .toList();
  }

  @protected
  List<ProviderImplConfig>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OidType dco_decode_oid_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OidType.values[raw as int];
  }

  @protected
  Cipher?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            raw);
  }

  @protected
  Provider?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            raw);
  }

  @protected
  ProviderConfig dco_decode_provider_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ProviderConfig(
      maxSecurityLevel: dco_decode_security_level(arr[0]),
      minSecurityLevel: dco_decode_security_level(arr[1]),
      supportedCiphers:
          dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
              arr[2]),
      supportedHashes:
          dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
              arr[3]),
      supportedAsymSpec:
          dco_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
              arr[4]),
    );
  }

  @protected
  SecurityLevel dco_decode_security_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecurityLevel.values[raw as int];
  }

  @protected
  SymmetricMode dco_decode_symmetric_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SymmetricMode.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AsymmetricKeySpec
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsymmetricKeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Cipher
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CipherImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CryptoHash
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CryptoHashImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DhExchange
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DhExchangeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairSpec
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeySpec
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProviderImplConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecurityModuleError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecurityModuleErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TpmError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TpmErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairSpec
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeySpec
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairSpec
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeySpec
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TpmError
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TpmErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AsymmetricKeySpec
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AsymmetricKeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Cipher
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CipherImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CryptoHash
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CryptoHashImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DhExchange
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DhExchangeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairSpec
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairSpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeySpec
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeySpecImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProviderImplConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SecurityModuleError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SecurityModuleErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TpmError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TpmErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<AsymmetricKeySpec>
      sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
            deserializer);
    return Set.from(inner);
  }

  @protected
  Set<Cipher>
      sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            deserializer);
    return Set.from(inner);
  }

  @protected
  Set<CryptoHash>
      sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
            deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Cipher
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
        deserializer));
  }

  @protected
  Provider
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        deserializer));
  }

  @protected
  ProviderConfig sse_decode_box_autoadd_provider_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_provider_config(deserializer));
  }

  @protected
  EccCurve sse_decode_ecc_curve(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EccCurve.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<AsymmetricKeySpec>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AsymmetricKeySpec>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Cipher>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Cipher>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<CryptoHash>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CryptoHash>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<ProviderImplConfig>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProviderImplConfig>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OidType sse_decode_oid_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OidType.values[inner];
  }

  @protected
  Cipher?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Provider?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProviderConfig sse_decode_provider_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxSecurityLevel = sse_decode_security_level(deserializer);
    var var_minSecurityLevel = sse_decode_security_level(deserializer);
    var var_supportedCiphers =
        sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
            deserializer);
    var var_supportedHashes =
        sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
            deserializer);
    var var_supportedAsymSpec =
        sse_decode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
            deserializer);
    return ProviderConfig(
        maxSecurityLevel: var_maxSecurityLevel,
        minSecurityLevel: var_minSecurityLevel,
        supportedCiphers: var_supportedCiphers,
        supportedHashes: var_supportedHashes,
        supportedAsymSpec: var_supportedAsymSpec);
  }

  @protected
  SecurityLevel sse_decode_security_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SecurityLevel.values[inner];
  }

  @protected
  SymmetricMode sse_decode_symmetric_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SymmetricMode.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          AsymmetricKeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsymmetricKeySpecImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          Cipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CipherImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          CryptoHash self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CryptoHashImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          DhExchange self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DhExchangeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairSpecImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeySpecImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          ProviderImplConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImplConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          SecurityModuleError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecurityModuleErrorImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
          T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          TpmError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TpmErrorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairSpecImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeySpecImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairSpecImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeySpecImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          TpmError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TpmErrorImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          AsymmetricKeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AsymmetricKeySpecImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          Cipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CipherImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          CryptoHash self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CryptoHashImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          DhExchange self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DhExchangeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairSpec(
          KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairSpecImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeySpec(
          KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeySpecImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          ProviderImplConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImplConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(
          SecurityModuleError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SecurityModuleErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
          T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(
          TpmError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TpmErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          Set<AsymmetricKeySpec> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
        self.toList(), serializer);
  }

  @protected
  void
      sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          Set<Cipher> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
        self.toList(), serializer);
  }

  @protected
  void
      sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          Set<CryptoHash> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
        self.toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          Cipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_provider_config(
      ProviderConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_provider_config(self, serializer);
  }

  @protected
  void sse_encode_ecc_curve(EccCurve self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          List<AsymmetricKeySpec> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          List<Cipher> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          List<CryptoHash> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          List<ProviderImplConfig> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_oid_type(OidType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          Cipher? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          self, serializer);
    }
  }

  @protected
  void sse_encode_provider_config(
      ProviderConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_security_level(self.maxSecurityLevel, serializer);
    sse_encode_security_level(self.minSecurityLevel, serializer);
    sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCipher(
        self.supportedCiphers, serializer);
    sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoHash(
        self.supportedHashes, serializer);
    sse_encode_Set_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAsymmetricKeySpec(
        self.supportedAsymSpec, serializer);
  }

  @protected
  void sse_encode_security_level(SecurityLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_symmetric_mode(SymmetricMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AsymmetricKeySpecImpl extends RustOpaque implements AsymmetricKeySpec {
  // Not to be used by end users
  AsymmetricKeySpecImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AsymmetricKeySpecImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AsymmetricKeySpec,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AsymmetricKeySpec,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AsymmetricKeySpecPtr,
  );
}

@sealed
class CipherImpl extends RustOpaque implements Cipher {
  // Not to be used by end users
  CipherImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CipherImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Cipher,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Cipher,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CipherPtr,
  );
}

@sealed
class CryptoHashImpl extends RustOpaque implements CryptoHash {
  // Not to be used by end users
  CryptoHashImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CryptoHashImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CryptoHash,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CryptoHash,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CryptoHashPtr,
  );
}

@sealed
class DhExchangeImpl extends RustOpaque implements DhExchange {
  // Not to be used by end users
  DhExchangeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DhExchangeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DhExchange,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DhExchange,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DhExchangePtr,
  );
}

@sealed
class KeyHandleImpl extends RustOpaque implements KeyHandle {
  // Not to be used by end users
  KeyHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyHandlePtr,
  );

  Future<Uint8List> decryptData({required List<int> encryptedData}) =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleDecryptData(
          that: this, encryptedData: encryptedData);

  Future<Uint8List> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyHandleEncryptData(that: this, data: data);

  Future<Uint8List> extractKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleExtractKey(
        that: this,
      );

  Future<String> id() => RustLib.instance.api.cryptoLayerCommonKeyHandleId(
        that: this,
      );
}

@sealed
class KeyPairHandleImpl extends RustOpaque implements KeyPairHandle {
  // Not to be used by end users
  KeyPairHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyPairHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyPairHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairHandlePtr,
  );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> decryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleDecryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleEncryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> getPublicKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleGetPublicKey(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<String> id() => RustLib.instance.api.cryptoLayerCommonKeyPairHandleId(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> signData({required List<int> data}) => RustLib.instance.api
      .cryptoLayerCommonKeyPairHandleSignData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<bool> verifySignature(
          {required List<int> data, required List<int> signature}) =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleVerifySignature(
          that: this, data: data, signature: signature);
}

@sealed
class KeyPairSpecImpl extends RustOpaque implements KeyPairSpec {
  // Not to be used by end users
  KeyPairSpecImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyPairSpecImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyPairSpec,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairSpec,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairSpecPtr,
  );

  AsymmetricKeySpec get asymSpec => RustLib.instance.api
          .cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetAsymSpec(
        that: this,
      );

  Cipher? get cipher => RustLib.instance.api
          .cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetCipher(
        that: this,
      );

  CryptoHash get signingHash => RustLib.instance.api
          .cryptoLayerCommonConfigKeyPairSpecAutoAccessorGetSigningHash(
        that: this,
      );

  set asymSpec(AsymmetricKeySpec asymSpec) => RustLib.instance.api
      .cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetAsymSpec(
          that: this, asymSpec: asymSpec);

  set cipher(Cipher? cipher) => RustLib.instance.api
      .cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetCipher(
          that: this, cipher: cipher);

  set signingHash(CryptoHash signingHash) => RustLib.instance.api
      .cryptoLayerCommonConfigKeyPairSpecAutoAccessorSetSigningHash(
          that: this, signingHash: signingHash);
}

@sealed
class KeySpecImpl extends RustOpaque implements KeySpec {
  // Not to be used by end users
  KeySpecImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeySpecImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeySpec,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeySpec,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeySpecPtr,
  );

  Cipher get cipher =>
      RustLib.instance.api.cryptoLayerCommonConfigKeySpecAutoAccessorGetCipher(
        that: this,
      );

  CryptoHash get signingHash => RustLib.instance.api
          .cryptoLayerCommonConfigKeySpecAutoAccessorGetSigningHash(
        that: this,
      );

  set cipher(Cipher cipher) =>
      RustLib.instance.api.cryptoLayerCommonConfigKeySpecAutoAccessorSetCipher(
          that: this, cipher: cipher);

  set signingHash(CryptoHash signingHash) => RustLib.instance.api
      .cryptoLayerCommonConfigKeySpecAutoAccessorSetSigningHash(
          that: this, signingHash: signingHash);
}

@sealed
class ProviderImpl extends RustOpaque implements Provider {
  // Not to be used by end users
  ProviderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProviderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Provider,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Provider,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProviderPtr,
  );

  Future<KeyHandle> createKey({required KeySpec spec}) => RustLib.instance.api
      .cryptoLayerCommonProviderCreateKey(that: this, spec: spec);

  Future<KeyPairHandle> createKeyPair({required KeyPairSpec spec}) =>
      RustLib.instance.api
          .cryptoLayerCommonProviderCreateKeyPair(that: this, spec: spec);

  Future<KeyHandle> importKey(
          {required KeySpec spec, required List<int> data}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportKey(
          that: this, spec: spec, data: data);

  Future<KeyPairHandle> importKeyPair(
          {required KeyPairSpec spec,
          required List<int> publicKey,
          required List<int> privateKey}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportKeyPair(
          that: this, spec: spec, publicKey: publicKey, privateKey: privateKey);

  Future<KeyPairHandle> importPublicKey(
          {required KeyPairSpec spec, required List<int> publicKey}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportPublicKey(
          that: this, spec: spec, publicKey: publicKey);

  Future<KeyHandle> loadKey({required String id}) =>
      RustLib.instance.api.cryptoLayerCommonProviderLoadKey(that: this, id: id);

  Future<KeyPairHandle> loadKeyPair({required String id}) =>
      RustLib.instance.api
          .cryptoLayerCommonProviderLoadKeyPair(that: this, id: id);

  Future<String> providerName() =>
      RustLib.instance.api.cryptoLayerCommonProviderProviderName(
        that: this,
      );

  Future<DhExchange> startEphemeralDhExchange({required KeyPairSpec spec}) =>
      RustLib.instance.api.cryptoLayerCommonProviderStartEphemeralDhExchange(
          that: this, spec: spec);
}

@sealed
class ProviderImplConfigImpl extends RustOpaque implements ProviderImplConfig {
  // Not to be used by end users
  ProviderImplConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProviderImplConfigImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProviderImplConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProviderImplConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProviderImplConfigPtr,
  );
}

@sealed
class SecurityModuleErrorImpl extends RustOpaque
    implements SecurityModuleError {
  // Not to be used by end users
  SecurityModuleErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SecurityModuleErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_SecurityModuleError,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_SecurityModuleError,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SecurityModuleErrorPtr,
  );
}

@sealed
class TImpl extends RustOpaque implements T {
  // Not to be used by end users
  TImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_T,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_T,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TPtr,
  );
}

@sealed
class TpmErrorImpl extends RustOpaque implements TpmError {
  // Not to be used by end users
  TpmErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TpmErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TpmError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TpmError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TpmErrorPtr,
  );

  /// Provides a human-readable description of the TPM error.
  ///
  /// This implementation ensures that errors can be easily logged or displayed to the user,
  /// with a clear indication of the error's nature and origin.
  Future<String> description() =>
      RustLib.instance.api.cryptoLayerTpmCoreErrorTpmErrorDescription(
        that: this,
      );
}
