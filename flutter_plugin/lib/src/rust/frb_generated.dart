// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/crypto.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/crypto_layer/common.dart';
import 'third_party/crypto_layer/common/config.dart';
import 'third_party/crypto_layer/common/crypto/algorithms.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/encryption.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/hashes.dart';
import 'third_party/crypto_layer/common/crypto/pkcs/standards.dart';
import 'third_party/crypto_layer/common/error.dart';
import 'third_party/crypto_layer/common/factory.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => 2004918692;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'cal_flutter_plugin',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> cryptoLayerCommonErrorCalErrorBacktrace(
      {required CalError that});

  Future<CalErrorKind> cryptoLayerCommonErrorCalErrorErrorKind(
      {required CalError that});

  Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData(
      {required KeyHandle that,
      required List<int> encryptedData,
      required List<int> iv});

  Future<void> cryptoLayerCommonKeyHandleDelete({required KeyHandle that});

  Future<(Uint8List, Uint8List)> cryptoLayerCommonKeyHandleEncryptData(
      {required KeyHandle that, required List<int> data});

  Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey(
      {required KeyHandle that});

  Future<String> cryptoLayerCommonKeyHandleId({required KeyHandle that});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData(
      {required KeyPairHandle that, required List<int> data});

  Future<void> cryptoLayerCommonKeyPairHandleDelete(
      {required KeyPairHandle that});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData(
      {required KeyPairHandle that, required List<int> data});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey(
      {required KeyPairHandle that});

  Future<String> cryptoLayerCommonKeyPairHandleId(
      {required KeyPairHandle that});

  Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData(
      {required KeyPairHandle that, required List<int> data});

  Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature(
      {required KeyPairHandle that,
      required List<int> data,
      required List<int> signature});

  Future<KeyHandle> cryptoLayerCommonProviderCreateKey(
      {required Provider that, required KeySpec spec});

  Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair(
      {required Provider that, required KeyPairSpec spec});

  Future<ProviderConfig?> cryptoLayerCommonProviderGetCapabilities(
      {required Provider that});

  Future<KeyHandle> cryptoLayerCommonProviderImportKey(
      {required Provider that, required KeySpec spec, required List<int> data});

  Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey,
      required List<int> privateKey});

  Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey});

  Future<KeyHandle> cryptoLayerCommonProviderLoadKey(
      {required Provider that, required String id});

  Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair(
      {required Provider that, required String id});

  Future<String> cryptoLayerCommonProviderProviderName(
      {required Provider that});

  Future<DhExchange> cryptoLayerCommonProviderStartEphemeralDhExchange(
      {required Provider that, required KeyPairSpec spec});

  Future<Cipher> cryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefault();

  Future<Provider?> cryptoLayerCommonFactoryCreateProvider(
      {required ProviderConfig conf, required ProviderImplConfig implConf});

  Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName(
      {required String name, required ProviderImplConfig implConf});

  Future<CryptoHash> cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault();

  Future<List<String>> cryptoLayerCommonFactoryGetAllProviders();

  Future<ProviderImplConfig> crateApiCryptoGetDefaultConfig(
      {required FutureOr<Uint8List?> Function(String) getFn,
      required FutureOr<bool> Function(String, Uint8List) storeFn,
      required FutureOr<void> Function(String) deleteFn,
      required FutureOr<List<String>> Function() allKeysFn});

  Future<void> crateApiSimpleInitApp();

  Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr(
      {required OidType that});

  Future<SymmetricMode>
      cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CalError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CalError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CalErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DhExchange;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DhExchange;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DhExchangePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairHandle;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_KeyPairHandlePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Provider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Provider;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProviderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProviderImplConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProviderImplConfig;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProviderImplConfigPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> cryptoLayerCommonErrorCalErrorBacktrace(
      {required CalError that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonErrorCalErrorBacktraceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonErrorCalErrorBacktraceConstMeta =>
      const TaskConstMeta(
        debugName: "CalError_backtrace",
        argNames: ["that"],
      );

  @override
  Future<CalErrorKind> cryptoLayerCommonErrorCalErrorErrorKind(
      {required CalError that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_cal_error_kind,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonErrorCalErrorErrorKindConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonErrorCalErrorErrorKindConstMeta =>
      const TaskConstMeta(
        debugName: "CalError_error_kind",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData(
      {required KeyHandle that,
      required List<int> encryptedData,
      required List<int> iv}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(encryptedData, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleDecryptDataConstMeta,
      argValues: [that, encryptedData, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleDecryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_decrypt_data",
        argNames: ["that", "encryptedData", "iv"],
      );

  @override
  Future<void> cryptoLayerCommonKeyHandleDelete({required KeyHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleDeleteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_delete",
        argNames: ["that"],
      );

  @override
  Future<(Uint8List, Uint8List)> cryptoLayerCommonKeyHandleEncryptData(
      {required KeyHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_list_prim_u_8_strict_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleEncryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleEncryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_encrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey(
      {required KeyHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleExtractKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleExtractKeyConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_extract_key",
        argNames: ["that"],
      );

  @override
  Future<String> cryptoLayerCommonKeyHandleId({required KeyHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyHandleIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyHandleIdConstMeta =>
      const TaskConstMeta(
        debugName: "KeyHandle_id",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_decrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<void> cryptoLayerCommonKeyPairHandleDelete(
      {required KeyPairHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleDeleteConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleDeleteConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_delete",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_encrypt_data",
        argNames: ["that", "data"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey(
      {required KeyPairHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_get_public_key",
        argNames: ["that"],
      );

  @override
  Future<String> cryptoLayerCommonKeyPairHandleId(
      {required KeyPairHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleIdConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_id",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData(
      {required KeyPairHandle that, required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleSignDataConstMeta,
      argValues: [that, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleSignDataConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_sign_data",
        argNames: ["that", "data"],
      );

  @override
  Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature(
      {required KeyPairHandle that,
      required List<int> data,
      required List<int> signature}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_list_prim_u_8_loose(signature, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta,
      argValues: [that, data, signature],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPairHandle_verify_signature",
        argNames: ["that", "data", "signature"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderCreateKey(
      {required Provider that, required KeySpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_spec(spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderCreateKeyConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderCreateKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_create_key",
        argNames: ["that", "spec"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair(
      {required Provider that, required KeyPairSpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_pair_spec(spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderCreateKeyPairConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderCreateKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_create_key_pair",
        argNames: ["that", "spec"],
      );

  @override
  Future<ProviderConfig?> cryptoLayerCommonProviderGetCapabilities(
      {required Provider that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_provider_config,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonProviderGetCapabilitiesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderGetCapabilitiesConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_get_capabilities",
        argNames: ["that"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderImportKey(
      {required Provider that,
      required KeySpec spec,
      required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_spec(spec, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderImportKeyConstMeta,
      argValues: [that, spec, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_key",
        argNames: ["that", "spec", "data"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey,
      required List<int> privateKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_pair_spec(spec, serializer);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        sse_encode_list_prim_u_8_loose(privateKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderImportKeyPairConstMeta,
      argValues: [that, spec, publicKey, privateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_key_pair",
        argNames: ["that", "spec", "publicKey", "privateKey"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey(
      {required Provider that,
      required KeyPairSpec spec,
      required List<int> publicKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_pair_spec(spec, serializer);
        sse_encode_list_prim_u_8_loose(publicKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderImportPublicKeyConstMeta,
      argValues: [that, spec, publicKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderImportPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_import_public_key",
        argNames: ["that", "spec", "publicKey"],
      );

  @override
  Future<KeyHandle> cryptoLayerCommonProviderLoadKey(
      {required Provider that, required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderLoadKeyConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderLoadKeyConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_load_key",
        argNames: ["that", "id"],
      );

  @override
  Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair(
      {required Provider that, required String id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_String(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderLoadKeyPairConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderLoadKeyPairConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_load_key_pair",
        argNames: ["that", "id"],
      );

  @override
  Future<String> cryptoLayerCommonProviderProviderName(
      {required Provider that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonProviderProviderNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonProviderProviderNameConstMeta =>
      const TaskConstMeta(
        debugName: "Provider_provider_name",
        argNames: ["that"],
      );

  @override
  Future<DhExchange> cryptoLayerCommonProviderStartEphemeralDhExchange(
      {required Provider that, required KeyPairSpec spec}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            that, serializer);
        sse_encode_box_autoadd_key_pair_spec(spec, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError,
      ),
      constMeta: kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta,
      argValues: [that, spec],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta =>
          const TaskConstMeta(
            debugName: "Provider_start_ephemeral_dh_exchange",
            argNames: ["that", "spec"],
          );

  @override
  Future<Cipher> cryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_cipher,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsEncryptionCipherDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "cipher_default",
            argNames: [],
          );

  @override
  Future<Provider?> cryptoLayerCommonFactoryCreateProvider(
      {required ProviderConfig conf, required ProviderImplConfig implConf}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_provider_config(conf, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
            implConf, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonFactoryCreateProviderConstMeta,
      argValues: [conf, implConf],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderConstMeta =>
      const TaskConstMeta(
        debugName: "create_provider",
        argNames: ["conf", "implConf"],
      );

  @override
  Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName(
      {required String name, required ProviderImplConfig implConf}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
            implConf, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta,
      argValues: [name, implConf],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta =>
      const TaskConstMeta(
        debugName: "create_provider_from_name",
        argNames: ["name", "implConf"],
      );

  @override
  Future<CryptoHash>
      cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_crypto_hash,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "crypto_hash_default",
            argNames: [],
          );

  @override
  Future<List<String>> cryptoLayerCommonFactoryGetAllProviders() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonFactoryGetAllProvidersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCryptoLayerCommonFactoryGetAllProvidersConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_providers",
        argNames: [],
      );

  @override
  Future<ProviderImplConfig> crateApiCryptoGetDefaultConfig(
      {required FutureOr<Uint8List?> Function(String) getFn,
      required FutureOr<bool> Function(String, Uint8List) storeFn,
      required FutureOr<void> Function(String) deleteFn,
      required FutureOr<List<String>> Function() allKeysFn}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
            getFn, serializer);
        sse_encode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
            storeFn, serializer);
        sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
            deleteFn, serializer);
        sse_encode_DartFn_Inputs__Output_list_String_AnyhowException(
            allKeysFn, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCryptoGetDefaultConfigConstMeta,
      argValues: [getFn, storeFn, deleteFn, allKeysFn],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCryptoGetDefaultConfigConstMeta =>
      const TaskConstMeta(
        debugName: "get_default_config",
        argNames: ["getFn", "storeFn", "deleteFn", "allKeysFn"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr(
      {required OidType that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_oid_type(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta =>
          const TaskConstMeta(
            debugName: "oid_type_as_str",
            argNames: ["that"],
          );

  @override
  Future<SymmetricMode>
      cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_symmetric_mode,
        decodeErrorData: null,
      ),
      constMeta:
          kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "symmetric_mode_default",
            argNames: [],
          );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List?> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<Uint8List?>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_opt_list_prim_u_8_strict(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_unit_AnyhowException(
          FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 = dco_decode_list_prim_u_8_strict(rawArg1);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_list_String_AnyhowException(
      FutureOr<List<String>> Function() raw) {
    return (
      callId,
    ) async {
      Box<List<String>>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_list_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CalError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CalError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DhExchange => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DhExchange => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_KeyPairHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_KeyPairHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Provider => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Provider => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProviderImplConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProviderImplConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  CalError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CalErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DhExchange
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DhExchangeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProviderImplConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CalError
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CalErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<Uint8List?> Function(String)
      dco_decode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String)
      dco_decode_DartFn_Inputs_String_Output_unit_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(String, Uint8List)
      dco_decode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<List<String>> Function()
      dco_decode_DartFn_Inputs__Output_list_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  CalError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CalErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DhExchange
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DhExchangeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Provider
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProviderImplConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  T dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<AsymmetricKeySpec> dco_decode_Set_asymmetric_key_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_asymmetric_key_spec(raw));
  }

  @protected
  Set<Cipher> dco_decode_Set_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_cipher(raw));
  }

  @protected
  Set<CryptoHash> dco_decode_Set_crypto_hash(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_crypto_hash(raw));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ToCalError dco_decode_TraitDef_ToCalError(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  AsymmetricKeySpec dco_decode_asymmetric_key_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AsymmetricKeySpec_Rsa(
          dco_decode_key_bits(raw[1]),
        );
      case 1:
        return AsymmetricKeySpec_Ecc(
          scheme: dco_decode_ecc_signing_scheme(raw[1]),
          curve: dco_decode_ecc_curve(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Provider
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        raw);
  }

  @protected
  Cipher dco_decode_box_autoadd_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_cipher(raw);
  }

  @protected
  KeyPairSpec dco_decode_box_autoadd_key_pair_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_key_pair_spec(raw);
  }

  @protected
  KeySpec dco_decode_box_autoadd_key_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_key_spec(raw);
  }

  @protected
  ProviderConfig dco_decode_box_autoadd_provider_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_provider_config(raw);
  }

  @protected
  CalErrorKind dco_decode_cal_error_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CalErrorKind_NotImplemented();
      case 1:
        return CalErrorKind_BadParameter(
          description: dco_decode_String(raw[1]),
          internal: dco_decode_bool(raw[2]),
        );
      case 2:
        return CalErrorKind_MissingKey(
          keyId: dco_decode_String(raw[1]),
          keyType: dco_decode_key_type(raw[2]),
        );
      case 3:
        return CalErrorKind_MissingValue(
          description: dco_decode_String(raw[1]),
          internal: dco_decode_bool(raw[2]),
        );
      case 4:
        return CalErrorKind_FailedOperation(
          description: dco_decode_String(raw[1]),
          internal: dco_decode_bool(raw[2]),
        );
      case 5:
        return CalErrorKind_InitializationError(
          description: dco_decode_String(raw[1]),
          internal: dco_decode_bool(raw[2]),
        );
      case 6:
        return CalErrorKind_UnsupportedAlgorithm(
          dco_decode_String(raw[1]),
        );
      case 7:
        return CalErrorKind_Other();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ChCha20Mode dco_decode_ch_cha_20_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChCha20Mode.values[raw as int];
  }

  @protected
  Cipher dco_decode_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Cipher_Aes(
          dco_decode_symmetric_mode(raw[1]),
          dco_decode_key_bits(raw[2]),
        );
      case 1:
        return Cipher_TripleDes(
          dco_decode_triple_des_num_keys(raw[1]),
        );
      case 2:
        return Cipher_Des();
      case 3:
        return Cipher_Rc2(
          dco_decode_rc_2_key_bits(raw[1]),
        );
      case 4:
        return Cipher_Camellia(
          dco_decode_symmetric_mode(raw[1]),
          dco_decode_key_bits(raw[2]),
        );
      case 5:
        return Cipher_Rc4();
      case 6:
        return Cipher_Chacha20(
          dco_decode_ch_cha_20_mode(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CryptoHash dco_decode_crypto_hash(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CryptoHash_Sha1();
      case 1:
        return CryptoHash_Sha2(
          dco_decode_sha_2_bits(raw[1]),
        );
      case 2:
        return CryptoHash_Sha3(
          dco_decode_sha_3_bits(raw[1]),
        );
      case 3:
        return CryptoHash_Md2();
      case 4:
        return CryptoHash_Md4();
      case 5:
        return CryptoHash_Md5();
      case 6:
        return CryptoHash_Ripemd160();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EccCurve dco_decode_ecc_curve(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EccCurve.values[raw as int];
  }

  @protected
  EccSigningScheme dco_decode_ecc_signing_scheme(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EccSigningScheme.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  KeyBits dco_decode_key_bits(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyBits.values[raw as int];
  }

  @protected
  KeyPairSpec dco_decode_key_pair_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return KeyPairSpec(
      asymSpec: dco_decode_asymmetric_key_spec(arr[0]),
      cipher: dco_decode_opt_box_autoadd_cipher(arr[1]),
      signingHash: dco_decode_crypto_hash(arr[2]),
    );
  }

  @protected
  KeySpec dco_decode_key_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeySpec(
      cipher: dco_decode_cipher(arr[0]),
      signingHash: dco_decode_crypto_hash(arr[1]),
    );
  }

  @protected
  KeyType dco_decode_key_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyType.values[raw as int];
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AsymmetricKeySpec> dco_decode_list_asymmetric_key_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_asymmetric_key_spec).toList();
  }

  @protected
  List<Cipher> dco_decode_list_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_cipher).toList();
  }

  @protected
  List<CryptoHash> dco_decode_list_crypto_hash(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_crypto_hash).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OidType dco_decode_oid_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OidType.values[raw as int];
  }

  @protected
  Provider?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
            raw);
  }

  @protected
  Cipher? dco_decode_opt_box_autoadd_cipher(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_cipher(raw);
  }

  @protected
  ProviderConfig? dco_decode_opt_box_autoadd_provider_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_provider_config(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  ProviderConfig dco_decode_provider_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ProviderConfig(
      maxSecurityLevel: dco_decode_security_level(arr[0]),
      minSecurityLevel: dco_decode_security_level(arr[1]),
      supportedCiphers: dco_decode_Set_cipher(arr[2]),
      supportedHashes: dco_decode_Set_crypto_hash(arr[3]),
      supportedAsymSpec: dco_decode_Set_asymmetric_key_spec(arr[4]),
    );
  }

  @protected
  Rc2KeyBits dco_decode_rc_2_key_bits(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Rc2KeyBits.values[raw as int];
  }

  @protected
  (Uint8List, Uint8List)
      dco_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  SecurityLevel dco_decode_security_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecurityLevel.values[raw as int];
  }

  @protected
  Sha2Bits dco_decode_sha_2_bits(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Sha2Bits.values[raw as int];
  }

  @protected
  Sha3Bits dco_decode_sha_3_bits(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Sha3Bits.values[raw as int];
  }

  @protected
  SymmetricMode dco_decode_symmetric_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SymmetricMode.values[raw as int];
  }

  @protected
  TripleDesNumKeys dco_decode_triple_des_num_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TripleDesNumKeys.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  CalError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CalErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DhExchange
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DhExchangeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProviderImplConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CalError
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CalErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  CalError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CalErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DhExchange
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DhExchangeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  KeyPairHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Provider
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProviderImplConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProviderImplConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  T sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<AsymmetricKeySpec> sse_decode_Set_asymmetric_key_spec(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_asymmetric_key_spec(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<Cipher> sse_decode_Set_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_cipher(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<CryptoHash> sse_decode_Set_crypto_hash(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_crypto_hash(deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AsymmetricKeySpec sse_decode_asymmetric_key_spec(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_key_bits(deserializer);
        return AsymmetricKeySpec_Rsa(var_field0);
      case 1:
        var var_scheme = sse_decode_ecc_signing_scheme(deserializer);
        var var_curve = sse_decode_ecc_curve(deserializer);
        return AsymmetricKeySpec_Ecc(scheme: var_scheme, curve: var_curve);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Provider
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        deserializer));
  }

  @protected
  Cipher sse_decode_box_autoadd_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_cipher(deserializer));
  }

  @protected
  KeyPairSpec sse_decode_box_autoadd_key_pair_spec(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_key_pair_spec(deserializer));
  }

  @protected
  KeySpec sse_decode_box_autoadd_key_spec(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_key_spec(deserializer));
  }

  @protected
  ProviderConfig sse_decode_box_autoadd_provider_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_provider_config(deserializer));
  }

  @protected
  CalErrorKind sse_decode_cal_error_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return CalErrorKind_NotImplemented();
      case 1:
        var var_description = sse_decode_String(deserializer);
        var var_internal = sse_decode_bool(deserializer);
        return CalErrorKind_BadParameter(
            description: var_description, internal: var_internal);
      case 2:
        var var_keyId = sse_decode_String(deserializer);
        var var_keyType = sse_decode_key_type(deserializer);
        return CalErrorKind_MissingKey(keyId: var_keyId, keyType: var_keyType);
      case 3:
        var var_description = sse_decode_String(deserializer);
        var var_internal = sse_decode_bool(deserializer);
        return CalErrorKind_MissingValue(
            description: var_description, internal: var_internal);
      case 4:
        var var_description = sse_decode_String(deserializer);
        var var_internal = sse_decode_bool(deserializer);
        return CalErrorKind_FailedOperation(
            description: var_description, internal: var_internal);
      case 5:
        var var_description = sse_decode_String(deserializer);
        var var_internal = sse_decode_bool(deserializer);
        return CalErrorKind_InitializationError(
            description: var_description, internal: var_internal);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return CalErrorKind_UnsupportedAlgorithm(var_field0);
      case 7:
        return CalErrorKind_Other();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ChCha20Mode sse_decode_ch_cha_20_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChCha20Mode.values[inner];
  }

  @protected
  Cipher sse_decode_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_symmetric_mode(deserializer);
        var var_field1 = sse_decode_key_bits(deserializer);
        return Cipher_Aes(var_field0, var_field1);
      case 1:
        var var_field0 = sse_decode_triple_des_num_keys(deserializer);
        return Cipher_TripleDes(var_field0);
      case 2:
        return Cipher_Des();
      case 3:
        var var_field0 = sse_decode_rc_2_key_bits(deserializer);
        return Cipher_Rc2(var_field0);
      case 4:
        var var_field0 = sse_decode_symmetric_mode(deserializer);
        var var_field1 = sse_decode_key_bits(deserializer);
        return Cipher_Camellia(var_field0, var_field1);
      case 5:
        return Cipher_Rc4();
      case 6:
        var var_field0 = sse_decode_ch_cha_20_mode(deserializer);
        return Cipher_Chacha20(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CryptoHash sse_decode_crypto_hash(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return CryptoHash_Sha1();
      case 1:
        var var_field0 = sse_decode_sha_2_bits(deserializer);
        return CryptoHash_Sha2(var_field0);
      case 2:
        var var_field0 = sse_decode_sha_3_bits(deserializer);
        return CryptoHash_Sha3(var_field0);
      case 3:
        return CryptoHash_Md2();
      case 4:
        return CryptoHash_Md4();
      case 5:
        return CryptoHash_Md5();
      case 6:
        return CryptoHash_Ripemd160();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EccCurve sse_decode_ecc_curve(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EccCurve.values[inner];
  }

  @protected
  EccSigningScheme sse_decode_ecc_signing_scheme(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EccSigningScheme.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  KeyBits sse_decode_key_bits(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeyBits.values[inner];
  }

  @protected
  KeyPairSpec sse_decode_key_pair_spec(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_asymSpec = sse_decode_asymmetric_key_spec(deserializer);
    var var_cipher = sse_decode_opt_box_autoadd_cipher(deserializer);
    var var_signingHash = sse_decode_crypto_hash(deserializer);
    return KeyPairSpec(
        asymSpec: var_asymSpec,
        cipher: var_cipher,
        signingHash: var_signingHash);
  }

  @protected
  KeySpec sse_decode_key_spec(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_cipher = sse_decode_cipher(deserializer);
    var var_signingHash = sse_decode_crypto_hash(deserializer);
    return KeySpec(cipher: var_cipher, signingHash: var_signingHash);
  }

  @protected
  KeyType sse_decode_key_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeyType.values[inner];
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AsymmetricKeySpec> sse_decode_list_asymmetric_key_spec(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AsymmetricKeySpec>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_asymmetric_key_spec(deserializer));
    }
    return ans_;
  }

  @protected
  List<Cipher> sse_decode_list_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Cipher>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_cipher(deserializer));
    }
    return ans_;
  }

  @protected
  List<CryptoHash> sse_decode_list_crypto_hash(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CryptoHash>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_crypto_hash(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OidType sse_decode_oid_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OidType.values[inner];
  }

  @protected
  Provider?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Cipher? sse_decode_opt_box_autoadd_cipher(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_cipher(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProviderConfig? sse_decode_opt_box_autoadd_provider_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_provider_config(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProviderConfig sse_decode_provider_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_maxSecurityLevel = sse_decode_security_level(deserializer);
    var var_minSecurityLevel = sse_decode_security_level(deserializer);
    var var_supportedCiphers = sse_decode_Set_cipher(deserializer);
    var var_supportedHashes = sse_decode_Set_crypto_hash(deserializer);
    var var_supportedAsymSpec =
        sse_decode_Set_asymmetric_key_spec(deserializer);
    return ProviderConfig(
        maxSecurityLevel: var_maxSecurityLevel,
        minSecurityLevel: var_minSecurityLevel,
        supportedCiphers: var_supportedCiphers,
        supportedHashes: var_supportedHashes,
        supportedAsymSpec: var_supportedAsymSpec);
  }

  @protected
  Rc2KeyBits sse_decode_rc_2_key_bits(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Rc2KeyBits.values[inner];
  }

  @protected
  (Uint8List, Uint8List)
      sse_decode_record_list_prim_u_8_strict_list_prim_u_8_strict(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SecurityLevel sse_decode_security_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SecurityLevel.values[inner];
  }

  @protected
  Sha2Bits sse_decode_sha_2_bits(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Sha2Bits.values[inner];
  }

  @protected
  Sha3Bits sse_decode_sha_3_bits(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Sha3Bits.values[inner];
  }

  @protected
  SymmetricMode sse_decode_symmetric_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SymmetricMode.values[inner];
  }

  @protected
  TripleDesNumKeys sse_decode_triple_des_num_keys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TripleDesNumKeys.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          CalError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CalErrorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          DhExchange self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DhExchangeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          ProviderImplConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImplConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
          T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          CalError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CalErrorImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List?> Function(String) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_opt_list_prim_u_8_strict_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit_AnyhowException(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(String, Uint8List) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_list_prim_u_8_strict_Output_bool_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_list_String_AnyhowException(
      FutureOr<List<String>> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_list_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCalError(
          CalError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CalErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDHExchange(
          DhExchange self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DhExchangeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyHandle(
          KeyHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyHandleImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairHandle(
          KeyPairHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as KeyPairHandleImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(
          ProviderImplConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProviderImplConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(
          T self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_Set_asymmetric_key_spec(
      Set<AsymmetricKeySpec> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_asymmetric_key_spec(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_cipher(Set<Cipher> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_cipher(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_crypto_hash(
      Set<CryptoHash> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_crypto_hash(self.toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_asymmetric_key_spec(
      AsymmetricKeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AsymmetricKeySpec_Rsa(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_key_bits(field0, serializer);
      case AsymmetricKeySpec_Ecc(scheme: final scheme, curve: final curve):
        sse_encode_i_32(1, serializer);
        sse_encode_ecc_signing_scheme(scheme, serializer);
        sse_encode_ecc_curve(curve, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_cipher(Cipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cipher(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_key_pair_spec(
      KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_key_pair_spec(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_key_spec(KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_key_spec(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_provider_config(
      ProviderConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_provider_config(self, serializer);
  }

  @protected
  void sse_encode_cal_error_kind(CalErrorKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CalErrorKind_NotImplemented():
        sse_encode_i_32(0, serializer);
      case CalErrorKind_BadParameter(
          description: final description,
          internal: final internal
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(description, serializer);
        sse_encode_bool(internal, serializer);
      case CalErrorKind_MissingKey(keyId: final keyId, keyType: final keyType):
        sse_encode_i_32(2, serializer);
        sse_encode_String(keyId, serializer);
        sse_encode_key_type(keyType, serializer);
      case CalErrorKind_MissingValue(
          description: final description,
          internal: final internal
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(description, serializer);
        sse_encode_bool(internal, serializer);
      case CalErrorKind_FailedOperation(
          description: final description,
          internal: final internal
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(description, serializer);
        sse_encode_bool(internal, serializer);
      case CalErrorKind_InitializationError(
          description: final description,
          internal: final internal
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_String(description, serializer);
        sse_encode_bool(internal, serializer);
      case CalErrorKind_UnsupportedAlgorithm(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case CalErrorKind_Other():
        sse_encode_i_32(7, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ch_cha_20_mode(ChCha20Mode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_cipher(Cipher self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Cipher_Aes(field0: final field0, field1: final field1):
        sse_encode_i_32(0, serializer);
        sse_encode_symmetric_mode(field0, serializer);
        sse_encode_key_bits(field1, serializer);
      case Cipher_TripleDes(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_triple_des_num_keys(field0, serializer);
      case Cipher_Des():
        sse_encode_i_32(2, serializer);
      case Cipher_Rc2(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_rc_2_key_bits(field0, serializer);
      case Cipher_Camellia(field0: final field0, field1: final field1):
        sse_encode_i_32(4, serializer);
        sse_encode_symmetric_mode(field0, serializer);
        sse_encode_key_bits(field1, serializer);
      case Cipher_Rc4():
        sse_encode_i_32(5, serializer);
      case Cipher_Chacha20(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_ch_cha_20_mode(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_crypto_hash(CryptoHash self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CryptoHash_Sha1():
        sse_encode_i_32(0, serializer);
      case CryptoHash_Sha2(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_sha_2_bits(field0, serializer);
      case CryptoHash_Sha3(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_sha_3_bits(field0, serializer);
      case CryptoHash_Md2():
        sse_encode_i_32(3, serializer);
      case CryptoHash_Md4():
        sse_encode_i_32(4, serializer);
      case CryptoHash_Md5():
        sse_encode_i_32(5, serializer);
      case CryptoHash_Ripemd160():
        sse_encode_i_32(6, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ecc_curve(EccCurve self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ecc_signing_scheme(
      EccSigningScheme self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_key_bits(KeyBits self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_key_pair_spec(KeyPairSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_asymmetric_key_spec(self.asymSpec, serializer);
    sse_encode_opt_box_autoadd_cipher(self.cipher, serializer);
    sse_encode_crypto_hash(self.signingHash, serializer);
  }

  @protected
  void sse_encode_key_spec(KeySpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cipher(self.cipher, serializer);
    sse_encode_crypto_hash(self.signingHash, serializer);
  }

  @protected
  void sse_encode_key_type(KeyType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_asymmetric_key_spec(
      List<AsymmetricKeySpec> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_asymmetric_key_spec(item, serializer);
    }
  }

  @protected
  void sse_encode_list_cipher(List<Cipher> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_cipher(item, serializer);
    }
  }

  @protected
  void sse_encode_list_crypto_hash(
      List<CryptoHash> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_crypto_hash(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_oid_type(OidType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          Provider? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_cipher(
      Cipher? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_cipher(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_provider_config(
      ProviderConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_provider_config(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_provider_config(
      ProviderConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_security_level(self.maxSecurityLevel, serializer);
    sse_encode_security_level(self.minSecurityLevel, serializer);
    sse_encode_Set_cipher(self.supportedCiphers, serializer);
    sse_encode_Set_crypto_hash(self.supportedHashes, serializer);
    sse_encode_Set_asymmetric_key_spec(self.supportedAsymSpec, serializer);
  }

  @protected
  void sse_encode_rc_2_key_bits(Rc2KeyBits self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_record_list_prim_u_8_strict_list_prim_u_8_strict(
      (Uint8List, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_security_level(SecurityLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sha_2_bits(Sha2Bits self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sha_3_bits(Sha3Bits self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_symmetric_mode(SymmetricMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_triple_des_num_keys(
      TripleDesNumKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class CalErrorImpl extends RustOpaque implements CalError {
  // Not to be used by end users
  CalErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CalErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CalError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CalError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CalErrorPtr,
  );

  Future<String> backtrace() =>
      RustLib.instance.api.cryptoLayerCommonErrorCalErrorBacktrace(
        that: this,
      );

  Future<CalErrorKind> errorKind() =>
      RustLib.instance.api.cryptoLayerCommonErrorCalErrorErrorKind(
        that: this,
      );
}

@sealed
class DhExchangeImpl extends RustOpaque implements DhExchange {
  // Not to be used by end users
  DhExchangeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DhExchangeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DhExchange,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DhExchange,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DhExchangePtr,
  );
}

@sealed
class KeyHandleImpl extends RustOpaque implements KeyHandle {
  // Not to be used by end users
  KeyHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyHandlePtr,
  );

  Future<Uint8List> decryptData(
          {required List<int> encryptedData, required List<int> iv}) =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleDecryptData(
          that: this, encryptedData: encryptedData, iv: iv);

  Future<void> delete() =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleDelete(
        that: this,
      );

  Future<(Uint8List, Uint8List)> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyHandleEncryptData(that: this, data: data);

  Future<Uint8List> extractKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyHandleExtractKey(
        that: this,
      );

  Future<String> id() => RustLib.instance.api.cryptoLayerCommonKeyHandleId(
        that: this,
      );
}

@sealed
class KeyPairHandleImpl extends RustOpaque implements KeyPairHandle {
  // Not to be used by end users
  KeyPairHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyPairHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyPairHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairHandlePtr,
  );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> decryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleDecryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<void> delete() =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleDelete(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> encryptData({required List<int> data}) =>
      RustLib.instance.api
          .cryptoLayerCommonKeyPairHandleEncryptData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> getPublicKey() =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleGetPublicKey(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<String> id() => RustLib.instance.api.cryptoLayerCommonKeyPairHandleId(
        that: this,
      );

  /// Abstraction of asymmetric key pair handles.
  Future<Uint8List> signData({required List<int> data}) => RustLib.instance.api
      .cryptoLayerCommonKeyPairHandleSignData(that: this, data: data);

  /// Abstraction of asymmetric key pair handles.
  Future<bool> verifySignature(
          {required List<int> data, required List<int> signature}) =>
      RustLib.instance.api.cryptoLayerCommonKeyPairHandleVerifySignature(
          that: this, data: data, signature: signature);
}

@sealed
class ProviderImpl extends RustOpaque implements Provider {
  // Not to be used by end users
  ProviderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProviderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Provider,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Provider,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProviderPtr,
  );

  Future<KeyHandle> createKey({required KeySpec spec}) => RustLib.instance.api
      .cryptoLayerCommonProviderCreateKey(that: this, spec: spec);

  Future<KeyPairHandle> createKeyPair({required KeyPairSpec spec}) =>
      RustLib.instance.api
          .cryptoLayerCommonProviderCreateKeyPair(that: this, spec: spec);

  Future<ProviderConfig?> getCapabilities() =>
      RustLib.instance.api.cryptoLayerCommonProviderGetCapabilities(
        that: this,
      );

  Future<KeyHandle> importKey(
          {required KeySpec spec, required List<int> data}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportKey(
          that: this, spec: spec, data: data);

  Future<KeyPairHandle> importKeyPair(
          {required KeyPairSpec spec,
          required List<int> publicKey,
          required List<int> privateKey}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportKeyPair(
          that: this, spec: spec, publicKey: publicKey, privateKey: privateKey);

  Future<KeyPairHandle> importPublicKey(
          {required KeyPairSpec spec, required List<int> publicKey}) =>
      RustLib.instance.api.cryptoLayerCommonProviderImportPublicKey(
          that: this, spec: spec, publicKey: publicKey);

  Future<KeyHandle> loadKey({required String id}) =>
      RustLib.instance.api.cryptoLayerCommonProviderLoadKey(that: this, id: id);

  Future<KeyPairHandle> loadKeyPair({required String id}) =>
      RustLib.instance.api
          .cryptoLayerCommonProviderLoadKeyPair(that: this, id: id);

  Future<String> providerName() =>
      RustLib.instance.api.cryptoLayerCommonProviderProviderName(
        that: this,
      );

  Future<DhExchange> startEphemeralDhExchange({required KeyPairSpec spec}) =>
      RustLib.instance.api.cryptoLayerCommonProviderStartEphemeralDhExchange(
          that: this, spec: spec);
}

@sealed
class ProviderImplConfigImpl extends RustOpaque implements ProviderImplConfig {
  // Not to be used by end users
  ProviderImplConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProviderImplConfigImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProviderImplConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProviderImplConfig,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProviderImplConfigPtr,
  );
}

@sealed
class TImpl extends RustOpaque implements T {
  // Not to be used by end users
  TImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_T,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_T,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TPtr,
  );
}
