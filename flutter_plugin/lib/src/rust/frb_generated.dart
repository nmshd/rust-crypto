// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/crypto_layer/common.dart';
import 'third_party/crypto_layer/common/config.dart';
import 'third_party/crypto_layer/common/crypto/algorithms.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/encryption.dart';
import 'third_party/crypto_layer/common/crypto/algorithms/hashes.dart';
import 'third_party/crypto_layer/common/crypto/pkcs/standards.dart';
import 'third_party/crypto_layer/common/error.dart';
import 'third_party/crypto_layer/common/factory.dart';
import 'third_party/crypto_layer/common/traits/key_handle.dart';
import 'third_party/crypto_layer/common/traits/module_provider.dart';
import 'third_party/crypto_layer/stub.dart';
import 'third_party/crypto_layer/tpm/android/wrapper/key_store/cipher/jni.dart';
import 'third_party/crypto_layer/tpm/core/error.dart';


                /// Main entrypoint of the Rust API
                class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
                  @internal
                  static final instance = RustLib._();

                  RustLib._();

                  /// Initialize flutter_rust_bridge
                  static Future<void> init({
                    RustLibApi? api,
                    BaseHandler? handler,
                    ExternalLibrary? externalLibrary,
                  }) async {
                    await instance.initImpl(
                      api: api,
                      handler: handler,
                      externalLibrary: externalLibrary,
                    );
                  }

                  /// Initialize flutter_rust_bridge in mock mode.
                  /// No libraries for FFI are loaded.
                  static void initMock({
                    required RustLibApi api,
                  }) {
                    instance.initMockImpl(
                      api: api,
                    );
                  }

                  /// Dispose flutter_rust_bridge
                  ///
                  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
                  /// is automatically disposed when the app stops.
                  static void dispose() => instance.disposeImpl();

                  @override
                  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

                  @override
                  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

                  @override
                  Future<void> executeRustInitializers() async {
                    
                  }

                  @override
                  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

                  @override
                  String get codegenVersion => '2.3.0';

                  @override
                  int get rustContentHash => -276142565;

                  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
                    stem: 'cal_flutter_plugin',
                    ioDirectory: 'rust/target/release/',
                    webPrefix: 'pkg/',
                  );
                }
                

                abstract class RustLibApi extends BaseApi {
                  BoxProviderImpl cryptoLayerCommonProviderAutoAccessorGetImplementation({required Provider that });

void cryptoLayerCommonProviderAutoAccessorSetImplementation({required Provider that , required BoxProviderImpl implementation });

Future<KeyHandle> cryptoLayerCommonProviderCreateKey({required Provider that , required KeySpec spec });

Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair({required Provider that , required KeyPairSpec spec });

Future<KeyHandle> cryptoLayerCommonProviderImportKey({required Provider that , required KeySpec spec , required List<int> data });

Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair({required Provider that , required KeyPairSpec spec , required List<int> publicKey , required List<int> privateKey });

Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey({required Provider that , required KeyPairSpec spec , required List<int> publicKey });

Future<KeyHandle> cryptoLayerCommonProviderLoadKey({required Provider that , required String id });

Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair({required Provider that , required String id });

Future<String> cryptoLayerCommonProviderProviderName({required Provider that });

Future<DHExchange> cryptoLayerCommonProviderStartEphemeralDhExchange({required Provider that , required KeyPairSpec spec });

Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData({required KeyHandle that , required List<int> encryptedData });

Future<Uint8List> cryptoLayerCommonKeyHandleEncryptData({required KeyHandle that , required List<int> data });

Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey({required KeyHandle that });

Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData({required KeyPairHandle that , required List<int> data });

Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData({required KeyPairHandle that , required List<int> data });

Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey({required KeyPairHandle that });

Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData({required KeyPairHandle that , required List<int> data });

Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature({required KeyPairHandle that , required List<int> data , required List<int> signature });

Future<EccCurve> cryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefault();

Future<SymmetricMode> cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault();

Future<CryptoHash> cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault();

Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr({required OidType that });

Future<Provider?> cryptoLayerCommonFactoryCreateProvider({required ProviderConfig conf , required List<ProviderImplConfig> implConfVec });

Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName({required String name , required ProviderImplConfig implConf });

Future<PinBoxFutureOutputBoxProviderImplAsyncTrait> cryptoLayerStubStubProviderFactoryCreateProvider({required StubProviderFactory that , required ProviderImplConfig implConfig });

Future<PinBoxFutureOutputProviderConfigAsyncTrait> cryptoLayerStubStubProviderFactoryGetCapabilities({required StubProviderFactory that , required ProviderImplConfig implConfig });

Future<String> cryptoLayerStubStubProviderFactoryGetName({required StubProviderFactory that });

Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderCreateKey({required StubProvider that , required KeySpec spec });

Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderCreateKeyPair({required StubProvider that , required KeyPairSpec spec });

Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderLoadKey({required StubProvider that , required String id });

Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderLoadKeyPair({required StubProvider that , required String id });

Future<String> cryptoLayerStubStubProviderProviderName({required StubProvider that });

Future<PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderStartEphemeralDhExchange({required StubProvider that , required KeyPairSpec spec });

Future<Cipher> cryptoLayerTpmAndroidWrapperKeyStoreCipherJniCipherDefault();

Future<String> cryptoLayerTpmCoreErrorTpmErrorDescription({required TpmError that });

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BoxProviderImpl;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BoxProviderImpl;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BoxProviderImplPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AutoLocal;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AutoLocal;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AutoLocalPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputProviderConfigAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Provider;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Provider;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProviderPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ProviderImplConfig;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ProviderImplConfig;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProviderImplConfigPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SecurityModuleError;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SecurityModuleError;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SecurityModuleErrorPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StubProvider;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StubProvider;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StubProviderPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StubProviderFactory;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StubProviderFactory;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StubProviderFactoryPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_TpmError;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_TpmError;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TpmErrorPtr;


                }
                

                class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
                  RustLibApiImpl({
                    required super.handler,
                    required super.wire,
                    required super.generalizedFrbRustBinding,
                    required super.portManager,
                  });

                  @override BoxProviderImpl cryptoLayerCommonProviderAutoAccessorGetImplementation({required Provider that })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonProviderAutoAccessorGetImplementationConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderAutoAccessorGetImplementationConstMeta => const TaskConstMeta(
            debugName: "Provider_auto_accessor_get_implementation",
            argNames: ["that"],
        );
        

@override void cryptoLayerCommonProviderAutoAccessorSetImplementation({required Provider that , required BoxProviderImpl implementation })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(implementation, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonProviderAutoAccessorSetImplementationConstMeta,
            argValues: [that, implementation],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderAutoAccessorSetImplementationConstMeta => const TaskConstMeta(
            debugName: "Provider_auto_accessor_set_implementation",
            argNames: ["that", "implementation"],
        );
        

@override Future<KeyHandle> cryptoLayerCommonProviderCreateKey({required Provider that , required KeySpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderCreateKeyConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderCreateKeyConstMeta => const TaskConstMeta(
            debugName: "Provider_create_key",
            argNames: ["that", "spec"],
        );
        

@override Future<KeyPairHandle> cryptoLayerCommonProviderCreateKeyPair({required Provider that , required KeyPairSpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_pair_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderCreateKeyPairConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderCreateKeyPairConstMeta => const TaskConstMeta(
            debugName: "Provider_create_key_pair",
            argNames: ["that", "spec"],
        );
        

@override Future<KeyHandle> cryptoLayerCommonProviderImportKey({required Provider that , required KeySpec spec , required List<int> data })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_spec(spec, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderImportKeyConstMeta,
            argValues: [that, spec, data],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderImportKeyConstMeta => const TaskConstMeta(
            debugName: "Provider_import_key",
            argNames: ["that", "spec", "data"],
        );
        

@override Future<KeyPairHandle> cryptoLayerCommonProviderImportKeyPair({required Provider that , required KeyPairSpec spec , required List<int> publicKey , required List<int> privateKey })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
sse_encode_list_prim_u_8_loose(publicKey, serializer);
sse_encode_list_prim_u_8_loose(privateKey, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_pair_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderImportKeyPairConstMeta,
            argValues: [that, spec, publicKey, privateKey],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderImportKeyPairConstMeta => const TaskConstMeta(
            debugName: "Provider_import_key_pair",
            argNames: ["that", "spec", "publicKey", "privateKey"],
        );
        

@override Future<KeyPairHandle> cryptoLayerCommonProviderImportPublicKey({required Provider that , required KeyPairSpec spec , required List<int> publicKey })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
sse_encode_list_prim_u_8_loose(publicKey, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_pair_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderImportPublicKeyConstMeta,
            argValues: [that, spec, publicKey],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderImportPublicKeyConstMeta => const TaskConstMeta(
            debugName: "Provider_import_public_key",
            argNames: ["that", "spec", "publicKey"],
        );
        

@override Future<KeyHandle> cryptoLayerCommonProviderLoadKey({required Provider that , required String id })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_String(id, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderLoadKeyConstMeta,
            argValues: [that, id],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderLoadKeyConstMeta => const TaskConstMeta(
            debugName: "Provider_load_key",
            argNames: ["that", "id"],
        );
        

@override Future<KeyPairHandle> cryptoLayerCommonProviderLoadKeyPair({required Provider that , required String id })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_String(id, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_key_pair_handle,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderLoadKeyPairConstMeta,
            argValues: [that, id],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderLoadKeyPairConstMeta => const TaskConstMeta(
            debugName: "Provider_load_key_pair",
            argNames: ["that", "id"],
        );
        

@override Future<String> cryptoLayerCommonProviderProviderName({required Provider that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonProviderProviderNameConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderProviderNameConstMeta => const TaskConstMeta(
            debugName: "Provider_provider_name",
            argNames: ["that"],
        );
        

@override Future<DHExchange> cryptoLayerCommonProviderStartEphemeralDhExchange({required Provider that , required KeyPairSpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_dh_exchange,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonProviderStartEphemeralDhExchangeConstMeta => const TaskConstMeta(
            debugName: "Provider_start_ephemeral_dh_exchange",
            argNames: ["that", "spec"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyHandleDecryptData({required KeyHandle that , required List<int> encryptedData })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_handle(that, serializer);
sse_encode_list_prim_u_8_loose(encryptedData, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyHandleDecryptDataConstMeta,
            argValues: [that, encryptedData],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyHandleDecryptDataConstMeta => const TaskConstMeta(
            debugName: "key_handle_decrypt_data",
            argNames: ["that", "encryptedData"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyHandleEncryptData({required KeyHandle that , required List<int> data })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_handle(that, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyHandleEncryptDataConstMeta,
            argValues: [that, data],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyHandleEncryptDataConstMeta => const TaskConstMeta(
            debugName: "key_handle_encrypt_data",
            argNames: ["that", "data"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyHandleExtractKey({required KeyHandle that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_handle(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyHandleExtractKeyConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyHandleExtractKeyConstMeta => const TaskConstMeta(
            debugName: "key_handle_extract_key",
            argNames: ["that"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyPairHandleDecryptData({required KeyPairHandle that , required List<int> data })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_pair_handle(that, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta,
            argValues: [that, data],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyPairHandleDecryptDataConstMeta => const TaskConstMeta(
            debugName: "key_pair_handle_decrypt_data",
            argNames: ["that", "data"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyPairHandleEncryptData({required KeyPairHandle that , required List<int> data })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_pair_handle(that, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta,
            argValues: [that, data],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyPairHandleEncryptDataConstMeta => const TaskConstMeta(
            debugName: "key_pair_handle_encrypt_data",
            argNames: ["that", "data"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyPairHandleGetPublicKey({required KeyPairHandle that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_pair_handle(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyPairHandleGetPublicKeyConstMeta => const TaskConstMeta(
            debugName: "key_pair_handle_get_public_key",
            argNames: ["that"],
        );
        

@override Future<Uint8List> cryptoLayerCommonKeyPairHandleSignData({required KeyPairHandle that , required List<int> data })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_pair_handle(that, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyPairHandleSignDataConstMeta,
            argValues: [that, data],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyPairHandleSignDataConstMeta => const TaskConstMeta(
            debugName: "key_pair_handle_sign_data",
            argNames: ["that", "data"],
        );
        

@override Future<bool> cryptoLayerCommonKeyPairHandleVerifySignature({required KeyPairHandle that , required List<int> data , required List<int> signature })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_key_pair_handle(that, serializer);
sse_encode_list_prim_u_8_loose(data, serializer);
sse_encode_list_prim_u_8_loose(signature, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError,
        )
        ,
            constMeta: kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta,
            argValues: [that, data, signature],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonKeyPairHandleVerifySignatureConstMeta => const TaskConstMeta(
            debugName: "key_pair_handle_verify_signature",
            argNames: ["that", "data", "signature"],
        );
        

@override Future<EccCurve> cryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefault()  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_ecc_curve,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefaultConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonCryptoAlgorithmsEncryptionEccCurveDefaultConstMeta => const TaskConstMeta(
            debugName: "ecc_curve_default",
            argNames: [],
        );
        

@override Future<SymmetricMode> cryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefault()  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_symmetric_mode,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonCryptoAlgorithmsEncryptionSymmetricModeDefaultConstMeta => const TaskConstMeta(
            debugName: "symmetric_mode_default",
            argNames: [],
        );
        

@override Future<CryptoHash> cryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefault()  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_crypto_hash,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonCryptoAlgorithmsHashesCryptoHashDefaultConstMeta => const TaskConstMeta(
            debugName: "crypto_hash_default",
            argNames: [],
        );
        

@override Future<void> cryptoLayerCommonCryptoPkcsStandardsOidTypeAsStr({required OidType that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_oid_type(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonCryptoPkcsStandardsOidTypeAsStrConstMeta => const TaskConstMeta(
            debugName: "oid_type_as_str",
            argNames: ["that"],
        );
        

@override Future<Provider?> cryptoLayerCommonFactoryCreateProvider({required ProviderConfig conf , required List<ProviderImplConfig> implConfVec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_box_autoadd_provider_config(conf, serializer);
sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(implConfVec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonFactoryCreateProviderConstMeta,
            argValues: [conf, implConfVec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderConstMeta => const TaskConstMeta(
            debugName: "create_provider",
            argNames: ["conf", "implConfVec"],
        );
        

@override Future<Provider?> cryptoLayerCommonFactoryCreateProviderFromName({required String name , required ProviderImplConfig implConf })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(name, serializer);
sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(implConf, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta,
            argValues: [name, implConf],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerCommonFactoryCreateProviderFromNameConstMeta => const TaskConstMeta(
            debugName: "create_provider_from_name",
            argNames: ["name", "implConf"],
        );
        

@override Future<PinBoxFutureOutputBoxProviderImplAsyncTrait> cryptoLayerStubStubProviderFactoryCreateProvider({required StubProviderFactory that , required ProviderImplConfig implConfig })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(that, serializer);
sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(implConfig, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderFactoryCreateProviderConstMeta,
            argValues: [that, implConfig],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderFactoryCreateProviderConstMeta => const TaskConstMeta(
            debugName: "StubProviderFactory_create_provider",
            argNames: ["that", "implConfig"],
        );
        

@override Future<PinBoxFutureOutputProviderConfigAsyncTrait> cryptoLayerStubStubProviderFactoryGetCapabilities({required StubProviderFactory that , required ProviderImplConfig implConfig })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(that, serializer);
sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(implConfig, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderFactoryGetCapabilitiesConstMeta,
            argValues: [that, implConfig],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderFactoryGetCapabilitiesConstMeta => const TaskConstMeta(
            debugName: "StubProviderFactory_get_capabilities",
            argNames: ["that", "implConfig"],
        );
        

@override Future<String> cryptoLayerStubStubProviderFactoryGetName({required StubProviderFactory that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderFactoryGetNameConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderFactoryGetNameConstMeta => const TaskConstMeta(
            debugName: "StubProviderFactory_get_name",
            argNames: ["that"],
        );
        

@override Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderCreateKey({required StubProvider that , required KeySpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
sse_encode_box_autoadd_key_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderCreateKeyConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderCreateKeyConstMeta => const TaskConstMeta(
            debugName: "StubProvider_create_key",
            argNames: ["that", "spec"],
        );
        

@override Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderCreateKeyPair({required StubProvider that , required KeyPairSpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderCreateKeyPairConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderCreateKeyPairConstMeta => const TaskConstMeta(
            debugName: "StubProvider_create_key_pair",
            argNames: ["that", "spec"],
        );
        

@override Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderLoadKey({required StubProvider that , required String id })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
sse_encode_String(id, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderLoadKeyConstMeta,
            argValues: [that, id],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderLoadKeyConstMeta => const TaskConstMeta(
            debugName: "StubProvider_load_key",
            argNames: ["that", "id"],
        );
        

@override Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderLoadKeyPair({required StubProvider that , required String id })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
sse_encode_String(id, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderLoadKeyPairConstMeta,
            argValues: [that, id],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderLoadKeyPairConstMeta => const TaskConstMeta(
            debugName: "StubProvider_load_key_pair",
            argNames: ["that", "id"],
        );
        

@override Future<String> cryptoLayerStubStubProviderProviderName({required StubProvider that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderProviderNameConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderProviderNameConstMeta => const TaskConstMeta(
            debugName: "StubProvider_provider_name",
            argNames: ["that"],
        );
        

@override Future<PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait> cryptoLayerStubStubProviderStartEphemeralDhExchange({required StubProvider that , required KeyPairSpec spec })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(that, serializer);
sse_encode_box_autoadd_key_pair_spec(spec, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerStubStubProviderStartEphemeralDhExchangeConstMeta,
            argValues: [that, spec],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerStubStubProviderStartEphemeralDhExchangeConstMeta => const TaskConstMeta(
            debugName: "StubProvider_start_ephemeral_dh_exchange",
            argNames: ["that", "spec"],
        );
        

@override Future<Cipher> cryptoLayerTpmAndroidWrapperKeyStoreCipherJniCipherDefault()  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_cipher,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerTpmAndroidWrapperKeyStoreCipherJniCipherDefaultConstMeta,
            argValues: [],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerTpmAndroidWrapperKeyStoreCipherJniCipherDefaultConstMeta => const TaskConstMeta(
            debugName: "cipher_default",
            argNames: [],
        );
        

@override Future<String> cryptoLayerTpmCoreErrorTpmErrorDescription({required TpmError that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        )
        ,
            constMeta: kCryptoLayerTpmCoreErrorTpmErrorDescriptionConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCryptoLayerTpmCoreErrorTpmErrorDescriptionConstMeta => const TaskConstMeta(
            debugName: "TpmError_description",
            argNames: ["that"],
        );
        

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BoxProviderImpl => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BoxProviderImpl => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_AutoLocal => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_AutoLocal => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Provider => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Provider => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ProviderImplConfig => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ProviderImplConfig => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SecurityModuleError => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SecurityModuleError => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StubProvider => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StubProvider => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_StubProviderFactory => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_StubProviderFactory => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_T => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_T => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_TpmError => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_TpmError => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError;



                  @protected BoxProviderImpl dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(raw); }

@protected AutoLocal dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(raw); }

@protected PinBoxFutureOutputBoxProviderImplAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputProviderConfigAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Provider dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected ProviderImplConfig dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected SecurityModuleError dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SecurityModuleErrorImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProvider dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProviderFactory dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected T dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TpmError dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Provider dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProvider dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Provider dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProvider dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProviderFactory dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TpmError dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected DHKeyExchangeImpl dco_decode_DynTrait_DHKeyExchangeImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected KeyHandleImpl dco_decode_DynTrait_KeyHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected KeyPairHandleImpl dco_decode_DynTrait_KeyPairHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected AutoLocal dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError('Not implemented in this codec, please use the other one'); }

@protected BoxProviderImpl dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return BoxProviderImplImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected AutoLocal dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return AutoLocalImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputBoxProviderImplAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputProviderConfigAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Provider dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected ProviderImplConfig dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return ProviderImplConfigImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected SecurityModuleError dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SecurityModuleErrorImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProvider dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected StubProviderFactory dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected T dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TpmError dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TpmErrorImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Set<AsymmetricKeySpec> dco_decode_Set_asymmetric_key_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return Set.from(dco_decode_list_asymmetric_key_spec(raw)); }

@protected Set<Cipher> dco_decode_Set_cipher(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return Set.from(dco_decode_list_cipher(raw)); }

@protected Set<CryptoHash> dco_decode_Set_crypto_hash(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return Set.from(dco_decode_list_crypto_hash(raw)); }

@protected String dco_decode_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as String; }

@protected DHKeyExchangeImpl dco_decode_TraitDef_DHKeyExchangeImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected KeyHandleImpl dco_decode_TraitDef_KeyHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected KeyPairHandleImpl dco_decode_TraitDef_KeyPairHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected ProviderFactory dco_decode_TraitDef_ProviderFactory(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected ProviderImpl dco_decode_TraitDef_ProviderImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected ToTpmError dco_decode_TraitDef_ToTpmError(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
throw UnimplementedError(); }

@protected AsymmetricKeySpec dco_decode_asymmetric_key_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
switch (raw[0]) {
                case 0: return AsymmetricKeySpec_Rsa(dco_decode_key_bits(raw[1]),);
case 1: return AsymmetricKeySpec_Ecc(scheme: dco_decode_ecc_signing_scheme(raw[1]),curve: dco_decode_ecc_curve(raw[2]),);
                default: throw Exception("unreachable");
            } }

@protected bool dco_decode_bool(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as bool; }

@protected DHKeyExchangeImpl dco_decode_box_DynTrait_DHKeyExchangeImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as DHKeyExchangeImpl; }

@protected KeyHandleImpl dco_decode_box_DynTrait_KeyHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as KeyHandleImpl; }

@protected KeyPairHandleImpl dco_decode_box_DynTrait_KeyPairHandleImpl(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as KeyPairHandleImpl; }

@protected Provider dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(raw); }

@protected Cipher dco_decode_box_autoadd_cipher(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_cipher(raw); }

@protected KeyHandle dco_decode_box_autoadd_key_handle(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_key_handle(raw); }

@protected KeyPairHandle dco_decode_box_autoadd_key_pair_handle(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_key_pair_handle(raw); }

@protected KeyPairSpec dco_decode_box_autoadd_key_pair_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_key_pair_spec(raw); }

@protected KeySpec dco_decode_box_autoadd_key_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_key_spec(raw); }

@protected ProviderConfig dco_decode_box_autoadd_provider_config(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dco_decode_provider_config(raw); }

@protected Cipher dco_decode_cipher(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return Cipher(raw: dco_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(arr[0]),); }

@protected CryptoHash dco_decode_crypto_hash(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
switch (raw[0]) {
                case 0: return CryptoHash_Sha1();
case 1: return CryptoHash_Sha2(dco_decode_sha_2_bits(raw[1]),);
case 2: return CryptoHash_Sha3(dco_decode_sha_3_bits(raw[1]),);
case 3: return CryptoHash_Md2();
case 4: return CryptoHash_Md4();
case 5: return CryptoHash_Md5();
case 6: return CryptoHash_Ripemd160();
                default: throw Exception("unreachable");
            } }

@protected DHExchange dco_decode_dh_exchange(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return DHExchange(implementation: dco_decode_box_DynTrait_DHKeyExchangeImpl(arr[0]),); }

@protected DHKeyExchangeImplImplementor dco_decode_dh_key_exchange_impl_implementor(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return DHKeyExchangeImplImplementor.values[raw as int]; }

@protected EccCurve dco_decode_ecc_curve(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return EccCurve.values[raw as int]; }

@protected EccSigningScheme dco_decode_ecc_signing_scheme(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return EccSigningScheme.values[raw as int]; }

@protected int dco_decode_i_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected KeyBits dco_decode_key_bits(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return KeyBits.values[raw as int]; }

@protected KeyHandle dco_decode_key_handle(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return KeyHandle(implementation: dco_decode_box_DynTrait_KeyHandleImpl(arr[0]),); }

@protected KeyHandleImplImplementor dco_decode_key_handle_impl_implementor(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return KeyHandleImplImplementor.values[raw as int]; }

@protected KeyPairHandle dco_decode_key_pair_handle(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return KeyPairHandle(implementation: dco_decode_box_DynTrait_KeyPairHandleImpl(arr[0]),); }

@protected KeyPairHandleImplImplementor dco_decode_key_pair_handle_impl_implementor(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return KeyPairHandleImplImplementor.values[raw as int]; }

@protected KeyPairSpec dco_decode_key_pair_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
                return KeyPairSpec(asymSpec: dco_decode_asymmetric_key_spec(arr[0]),
cipher: dco_decode_opt_box_autoadd_cipher(arr[1]),
signingHash: dco_decode_crypto_hash(arr[2]),); }

@protected KeySpec dco_decode_key_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return KeySpec(cipher: dco_decode_cipher(arr[0]),
signingHash: dco_decode_crypto_hash(arr[1]),); }

@protected List<ProviderImplConfig> dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig).toList(); }

@protected List<AsymmetricKeySpec> dco_decode_list_asymmetric_key_spec(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_asymmetric_key_spec).toList(); }

@protected List<Cipher> dco_decode_list_cipher(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_cipher).toList(); }

@protected List<CryptoHash> dco_decode_list_crypto_hash(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return (raw as List<dynamic>).map(dco_decode_crypto_hash).toList(); }

@protected List<int> dco_decode_list_prim_u_8_loose(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as List<int>; }

@protected Uint8List dco_decode_list_prim_u_8_strict(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as Uint8List; }

@protected OidType dco_decode_oid_type(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return OidType.values[raw as int]; }

@protected Provider? dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw == null ? null : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(raw); }

@protected Cipher? dco_decode_opt_box_autoadd_cipher(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw == null ? null : dco_decode_box_autoadd_cipher(raw); }

@protected ProviderConfig dco_decode_provider_config(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
final arr = raw as List<dynamic>;
                if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
                return ProviderConfig(maxSecurityLevel: dco_decode_security_level(arr[0]),
minSecurityLevel: dco_decode_security_level(arr[1]),
supportedCiphers: dco_decode_Set_cipher(arr[2]),
supportedHashes: dco_decode_Set_crypto_hash(arr[3]),
supportedAsymSpec: dco_decode_Set_asymmetric_key_spec(arr[4]),); }

@protected SecurityLevel dco_decode_security_level(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SecurityLevel.values[raw as int]; }

@protected Sha2Bits dco_decode_sha_2_bits(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return Sha2Bits.values[raw as int]; }

@protected Sha3Bits dco_decode_sha_3_bits(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return Sha3Bits.values[raw as int]; }

@protected SymmetricMode dco_decode_symmetric_mode(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return SymmetricMode.values[raw as int]; }

@protected int dco_decode_u_8(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected void dco_decode_unit(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return; }

@protected BigInt dco_decode_usize(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dcoDecodeU64(raw); }

@protected BoxProviderImpl sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(deserializer);
        return inner; }

@protected AutoLocal sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(deserializer);
        return inner; }

@protected PinBoxFutureOutputBoxProviderImplAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputProviderConfigAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Provider sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected ProviderImplConfig sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImplConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected SecurityModuleError sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return SecurityModuleErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProvider sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProviderFactory sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected T sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TpmError sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TpmErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Provider sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProvider sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Provider sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProvider sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProviderFactory sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TpmError sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TpmErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected DHKeyExchangeImpl sse_decode_DynTrait_DHKeyExchangeImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
throw UnimplementedError(''); }

@protected KeyHandleImpl sse_decode_DynTrait_KeyHandleImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
throw UnimplementedError(''); }

@protected KeyPairHandleImpl sse_decode_DynTrait_KeyPairHandleImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
throw UnimplementedError(''); }

@protected AutoLocal sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(deserializer);
        return inner; }

@protected BoxProviderImpl sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return BoxProviderImplImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected AutoLocal sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return AutoLocalImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputBoxProviderImplAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputProviderConfigAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Provider sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected ProviderImplConfig sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return ProviderImplConfigImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected SecurityModuleError sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return SecurityModuleErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProvider sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected StubProviderFactory sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return StubProviderFactoryImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected T sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TpmError sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TpmErrorImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Set<AsymmetricKeySpec> sse_decode_Set_asymmetric_key_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_asymmetric_key_spec(deserializer);
        return Set.from(inner); }

@protected Set<Cipher> sse_decode_Set_cipher(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_cipher(deserializer);
        return Set.from(inner); }

@protected Set<CryptoHash> sse_decode_Set_crypto_hash(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_crypto_hash(deserializer);
        return Set.from(inner); }

@protected String sse_decode_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_prim_u_8_strict(deserializer);
        return utf8.decoder.convert(inner); }

@protected AsymmetricKeySpec sse_decode_asymmetric_key_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            var tag_ = sse_decode_i_32(deserializer);
            switch (tag_) { case 0: var var_field0 = sse_decode_key_bits(deserializer);
return AsymmetricKeySpec_Rsa(var_field0);case 1: var var_scheme = sse_decode_ecc_signing_scheme(deserializer);
var var_curve = sse_decode_ecc_curve(deserializer);
return AsymmetricKeySpec_Ecc(scheme: var_scheme, curve: var_curve); default: throw UnimplementedError(''); }
             }

@protected bool sse_decode_bool(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8() != 0; }

@protected DHKeyExchangeImpl sse_decode_box_DynTrait_DHKeyExchangeImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_DynTrait_DHKeyExchangeImpl(deserializer)); }

@protected KeyHandleImpl sse_decode_box_DynTrait_KeyHandleImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_DynTrait_KeyHandleImpl(deserializer)); }

@protected KeyPairHandleImpl sse_decode_box_DynTrait_KeyPairHandleImpl(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_DynTrait_KeyPairHandleImpl(deserializer)); }

@protected Provider sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(deserializer)); }

@protected Cipher sse_decode_box_autoadd_cipher(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_cipher(deserializer)); }

@protected KeyHandle sse_decode_box_autoadd_key_handle(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_key_handle(deserializer)); }

@protected KeyPairHandle sse_decode_box_autoadd_key_pair_handle(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_key_pair_handle(deserializer)); }

@protected KeyPairSpec sse_decode_box_autoadd_key_pair_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_key_pair_spec(deserializer)); }

@protected KeySpec sse_decode_box_autoadd_key_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_key_spec(deserializer)); }

@protected ProviderConfig sse_decode_box_autoadd_provider_config(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_provider_config(deserializer)); }

@protected Cipher sse_decode_cipher(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_raw = sse_decode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(deserializer);
return Cipher(raw: var_raw); }

@protected CryptoHash sse_decode_crypto_hash(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            var tag_ = sse_decode_i_32(deserializer);
            switch (tag_) { case 0: return CryptoHash_Sha1();case 1: var var_field0 = sse_decode_sha_2_bits(deserializer);
return CryptoHash_Sha2(var_field0);case 2: var var_field0 = sse_decode_sha_3_bits(deserializer);
return CryptoHash_Sha3(var_field0);case 3: return CryptoHash_Md2();case 4: return CryptoHash_Md4();case 5: return CryptoHash_Md5();case 6: return CryptoHash_Ripemd160(); default: throw UnimplementedError(''); }
             }

@protected DHExchange sse_decode_dh_exchange(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_implementation = sse_decode_box_DynTrait_DHKeyExchangeImpl(deserializer);
return DHExchange(implementation: var_implementation); }

@protected DHKeyExchangeImplImplementor sse_decode_dh_key_exchange_impl_implementor(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return DHKeyExchangeImplImplementor.values[inner]; }

@protected EccCurve sse_decode_ecc_curve(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return EccCurve.values[inner]; }

@protected EccSigningScheme sse_decode_ecc_signing_scheme(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return EccSigningScheme.values[inner]; }

@protected int sse_decode_i_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getInt32(); }

@protected KeyBits sse_decode_key_bits(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return KeyBits.values[inner]; }

@protected KeyHandle sse_decode_key_handle(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_implementation = sse_decode_box_DynTrait_KeyHandleImpl(deserializer);
return KeyHandle(implementation: var_implementation); }

@protected KeyHandleImplImplementor sse_decode_key_handle_impl_implementor(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return KeyHandleImplImplementor.values[inner]; }

@protected KeyPairHandle sse_decode_key_pair_handle(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_implementation = sse_decode_box_DynTrait_KeyPairHandleImpl(deserializer);
return KeyPairHandle(implementation: var_implementation); }

@protected KeyPairHandleImplImplementor sse_decode_key_pair_handle_impl_implementor(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return KeyPairHandleImplImplementor.values[inner]; }

@protected KeyPairSpec sse_decode_key_pair_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_asymSpec = sse_decode_asymmetric_key_spec(deserializer);
var var_cipher = sse_decode_opt_box_autoadd_cipher(deserializer);
var var_signingHash = sse_decode_crypto_hash(deserializer);
return KeyPairSpec(asymSpec: var_asymSpec, cipher: var_cipher, signingHash: var_signingHash); }

@protected KeySpec sse_decode_key_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_cipher = sse_decode_cipher(deserializer);
var var_signingHash = sse_decode_crypto_hash(deserializer);
return KeySpec(cipher: var_cipher, signingHash: var_signingHash); }

@protected List<ProviderImplConfig> sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <ProviderImplConfig>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(deserializer)); }
        return ans_;
         }

@protected List<AsymmetricKeySpec> sse_decode_list_asymmetric_key_spec(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <AsymmetricKeySpec>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_asymmetric_key_spec(deserializer)); }
        return ans_;
         }

@protected List<Cipher> sse_decode_list_cipher(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <Cipher>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_cipher(deserializer)); }
        return ans_;
         }

@protected List<CryptoHash> sse_decode_list_crypto_hash(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

        var len_ = sse_decode_i_32(deserializer);
        var ans_ = <CryptoHash>[];
        for (var idx_ = 0; idx_ < len_; ++idx_) { ans_.add(sse_decode_crypto_hash(deserializer)); }
        return ans_;
         }

@protected List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var len_ = sse_decode_i_32(deserializer);
                return deserializer.buffer.getUint8List(len_); }

@protected Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var len_ = sse_decode_i_32(deserializer);
                return deserializer.buffer.getUint8List(len_); }

@protected OidType sse_decode_oid_type(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return OidType.values[inner]; }

@protected Provider? sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            if (sse_decode_bool(deserializer)) {
                return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(deserializer));
            } else {
                return null;
            }
             }

@protected Cipher? sse_decode_opt_box_autoadd_cipher(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            if (sse_decode_bool(deserializer)) {
                return (sse_decode_box_autoadd_cipher(deserializer));
            } else {
                return null;
            }
             }

@protected ProviderConfig sse_decode_provider_config(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var var_maxSecurityLevel = sse_decode_security_level(deserializer);
var var_minSecurityLevel = sse_decode_security_level(deserializer);
var var_supportedCiphers = sse_decode_Set_cipher(deserializer);
var var_supportedHashes = sse_decode_Set_crypto_hash(deserializer);
var var_supportedAsymSpec = sse_decode_Set_asymmetric_key_spec(deserializer);
return ProviderConfig(maxSecurityLevel: var_maxSecurityLevel, minSecurityLevel: var_minSecurityLevel, supportedCiphers: var_supportedCiphers, supportedHashes: var_supportedHashes, supportedAsymSpec: var_supportedAsymSpec); }

@protected SecurityLevel sse_decode_security_level(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return SecurityLevel.values[inner]; }

@protected Sha2Bits sse_decode_sha_2_bits(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return Sha2Bits.values[inner]; }

@protected Sha3Bits sse_decode_sha_3_bits(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return Sha3Bits.values[inner]; }

@protected SymmetricMode sse_decode_symmetric_mode(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_i_32(deserializer);
        return SymmetricMode.values[inner]; }

@protected int sse_decode_u_8(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8(); }

@protected void sse_decode_unit(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected BigInt sse_decode_usize(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getBigUint64(); }

@protected void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(BoxProviderImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(self, serializer); }

@protected void sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(AutoLocal self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(self, serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(PinBoxFutureOutputBoxProviderImplAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputBoxProviderImplAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(PinBoxFutureOutputProviderConfigAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputProviderConfigAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(ProviderImplConfig self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImplConfigImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(SecurityModuleError self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as SecurityModuleErrorImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(StubProvider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(StubProviderFactory self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderFactoryImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(T self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(TpmError self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TpmErrorImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(StubProvider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(StubProvider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(StubProviderFactory self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderFactoryImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(TpmError self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TpmErrorImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_DynTrait_DHKeyExchangeImpl(DHKeyExchangeImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_dh_key_exchange_impl_implementor(
        (() {
            
            throw Exception('not reachable');
        })()
        , serializer); }

@protected void sse_encode_DynTrait_KeyHandleImpl(KeyHandleImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_handle_impl_implementor(
        (() {
            
            throw Exception('not reachable');
        })()
        , serializer); }

@protected void sse_encode_DynTrait_KeyPairHandleImpl(KeyPairHandleImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_pair_handle_impl_implementor(
        (() {
            
            throw Exception('not reachable');
        })()
        , serializer); }

@protected void sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(AutoLocal self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(self, serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynProviderImpl(BoxProviderImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as BoxProviderImplImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifetimeableAutoLocalstaticstatic(AutoLocal self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as AutoLocalImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputBoxdynProviderImplSendasync_trait(PinBoxFutureOutputBoxProviderImplAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputBoxProviderImplAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputProviderConfigSendasync_trait(PinBoxFutureOutputProviderConfigAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputProviderConfigAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultBoxdynKeyHandleImplSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultDHExchangeSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyHandleSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPinBoxFutureOutputResultVecu8SecurityModuleErrorSendasync_trait(PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(ProviderImplConfig self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as ProviderImplConfigImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSecurityModuleError(SecurityModuleError self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as SecurityModuleErrorImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProvider(StubProvider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStubProviderFactory(StubProviderFactory self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as StubProviderFactoryImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerT(T self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTpmError(TpmError self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TpmErrorImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_Set_asymmetric_key_spec(Set<AsymmetricKeySpec> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_asymmetric_key_spec(self.toList(), serializer); }

@protected void sse_encode_Set_cipher(Set<Cipher> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_cipher(self.toList(), serializer); }

@protected void sse_encode_Set_crypto_hash(Set<CryptoHash> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_crypto_hash(self.toList(), serializer); }

@protected void sse_encode_String(String self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer); }

@protected void sse_encode_asymmetric_key_spec(AsymmetricKeySpec self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
switch (self) { case AsymmetricKeySpec_Rsa(field0: final field0): sse_encode_i_32(0, serializer); sse_encode_key_bits(field0, serializer);
case AsymmetricKeySpec_Ecc(scheme: final scheme,curve: final curve): sse_encode_i_32(1, serializer); sse_encode_ecc_signing_scheme(scheme, serializer);
sse_encode_ecc_curve(curve, serializer);
 default: throw UnimplementedError(''); } }

@protected void sse_encode_bool(bool self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self ? 1 : 0); }

@protected void sse_encode_box_DynTrait_DHKeyExchangeImpl(DHKeyExchangeImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_DynTrait_DHKeyExchangeImpl(self, serializer); }

@protected void sse_encode_box_DynTrait_KeyHandleImpl(KeyHandleImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_DynTrait_KeyHandleImpl(self, serializer); }

@protected void sse_encode_box_DynTrait_KeyPairHandleImpl(KeyPairHandleImpl self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_DynTrait_KeyPairHandleImpl(self, serializer); }

@protected void sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(self, serializer); }

@protected void sse_encode_box_autoadd_cipher(Cipher self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_cipher(self, serializer); }

@protected void sse_encode_box_autoadd_key_handle(KeyHandle self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_handle(self, serializer); }

@protected void sse_encode_box_autoadd_key_pair_handle(KeyPairHandle self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_pair_handle(self, serializer); }

@protected void sse_encode_box_autoadd_key_pair_spec(KeyPairSpec self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_pair_spec(self, serializer); }

@protected void sse_encode_box_autoadd_key_spec(KeySpec self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_key_spec(self, serializer); }

@protected void sse_encode_box_autoadd_provider_config(ProviderConfig self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_provider_config(self, serializer); }

@protected void sse_encode_cipher(Cipher self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_Lifetimeable_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoLocalstaticstatic(self.raw, serializer);
 }

@protected void sse_encode_crypto_hash(CryptoHash self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
switch (self) { case CryptoHash_Sha1(): sse_encode_i_32(0, serializer); case CryptoHash_Sha2(field0: final field0): sse_encode_i_32(1, serializer); sse_encode_sha_2_bits(field0, serializer);
case CryptoHash_Sha3(field0: final field0): sse_encode_i_32(2, serializer); sse_encode_sha_3_bits(field0, serializer);
case CryptoHash_Md2(): sse_encode_i_32(3, serializer); case CryptoHash_Md4(): sse_encode_i_32(4, serializer); case CryptoHash_Md5(): sse_encode_i_32(5, serializer); case CryptoHash_Ripemd160(): sse_encode_i_32(6, serializer);  default: throw UnimplementedError(''); } }

@protected void sse_encode_dh_exchange(DHExchange self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_box_DynTrait_DHKeyExchangeImpl(self.implementation, serializer);
 }

@protected void sse_encode_dh_key_exchange_impl_implementor(DHKeyExchangeImplImplementor self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_ecc_curve(EccCurve self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_ecc_signing_scheme(EccSigningScheme self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_i_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putInt32(self); }

@protected void sse_encode_key_bits(KeyBits self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_key_handle(KeyHandle self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_box_DynTrait_KeyHandleImpl(self.implementation, serializer);
 }

@protected void sse_encode_key_handle_impl_implementor(KeyHandleImplImplementor self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_key_pair_handle(KeyPairHandle self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_box_DynTrait_KeyPairHandleImpl(self.implementation, serializer);
 }

@protected void sse_encode_key_pair_handle_impl_implementor(KeyPairHandleImplImplementor self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_key_pair_spec(KeyPairSpec self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_asymmetric_key_spec(self.asymSpec, serializer);
sse_encode_opt_box_autoadd_cipher(self.cipher, serializer);
sse_encode_crypto_hash(self.signingHash, serializer);
 }

@protected void sse_encode_key_spec(KeySpec self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_cipher(self.cipher, serializer);
sse_encode_crypto_hash(self.signingHash, serializer);
 }

@protected void sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(List<ProviderImplConfig> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProviderImplConfig(item, serializer); } }

@protected void sse_encode_list_asymmetric_key_spec(List<AsymmetricKeySpec> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_asymmetric_key_spec(item, serializer); } }

@protected void sse_encode_list_cipher(List<Cipher> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_cipher(item, serializer); } }

@protected void sse_encode_list_crypto_hash(List<CryptoHash> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
        for (final item in self) { sse_encode_crypto_hash(item, serializer); } }

@protected void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
                    serializer.buffer.putUint8List(self is Uint8List ? self : Uint8List.fromList(self)); }

@protected void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
                    serializer.buffer.putUint8List(self); }

@protected void sse_encode_oid_type(OidType self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(Provider? self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs

                sse_encode_bool(self != null, serializer);
                if (self != null) {
                    sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProvider(self, serializer);
                }
                 }

@protected void sse_encode_opt_box_autoadd_cipher(Cipher? self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs

                sse_encode_bool(self != null, serializer);
                if (self != null) {
                    sse_encode_box_autoadd_cipher(self, serializer);
                }
                 }

@protected void sse_encode_provider_config(ProviderConfig self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_security_level(self.maxSecurityLevel, serializer);
sse_encode_security_level(self.minSecurityLevel, serializer);
sse_encode_Set_cipher(self.supportedCiphers, serializer);
sse_encode_Set_crypto_hash(self.supportedHashes, serializer);
sse_encode_Set_asymmetric_key_spec(self.supportedAsymSpec, serializer);
 }

@protected void sse_encode_security_level(SecurityLevel self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_sha_2_bits(Sha2Bits self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_sha_3_bits(Sha3Bits self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_symmetric_mode(SymmetricMode self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.index, serializer); }

@protected void sse_encode_u_8(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self); }

@protected void sse_encode_unit(void self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected void sse_encode_usize(BigInt self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putBigUint64(self); }
                }
                

            

            

            enum DHKeyExchangeImplImplementor {
                    
                    ;
                    
                }

enum KeyHandleImplImplementor {
                    
                    ;
                    
                }

enum KeyPairHandleImplImplementor {
                    
                    ;
                    
                }
            
            @sealed class AutoLocalImpl extends RustOpaque implements AutoLocal {
                // Not to be used by end users
                AutoLocalImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                AutoLocalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_AutoLocal,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_AutoLocal,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_AutoLocalPtr,
                );

                
            }
            @sealed class BoxProviderImplImpl extends RustOpaque implements BoxProviderImpl {
                // Not to be used by end users
                BoxProviderImplImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                BoxProviderImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_BoxProviderImpl,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_BoxProviderImpl,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_BoxProviderImplPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputBoxProviderImplAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputBoxProviderImplAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputBoxProviderImplAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputBoxProviderImplAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputProviderConfigAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputProviderConfigAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputProviderConfigAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputProviderConfigAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputProviderConfigAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultBoxKeyHandleImplSecurityModuleErrorAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTraitPtr,
                );

                
            }
            @sealed class PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl extends RustOpaque implements PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait {
                // Not to be used by end users
                PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTrait,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_PinBoxFutureOutputResultVecU8SecurityModuleErrorAsyncTraitPtr,
                );

                
            }
            @sealed class ProviderImpl extends RustOpaque implements Provider {
                // Not to be used by end users
                ProviderImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                ProviderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Provider,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Provider,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_ProviderPtr,
                );

                 BoxProviderImpl get implementation=>RustLib.instance.api.cryptoLayerCommonProviderAutoAccessorGetImplementation(that: this, );


  set implementation(BoxProviderImpl implementation)=>RustLib.instance.api.cryptoLayerCommonProviderAutoAccessorSetImplementation(that: this, implementation: implementation);


 Future<KeyHandle>  createKey({required KeySpec spec })=>RustLib.instance.api.cryptoLayerCommonProviderCreateKey(that: this, spec: spec);


 Future<KeyPairHandle>  createKeyPair({required KeyPairSpec spec })=>RustLib.instance.api.cryptoLayerCommonProviderCreateKeyPair(that: this, spec: spec);


 Future<KeyHandle>  importKey({required KeySpec spec , required List<int> data })=>RustLib.instance.api.cryptoLayerCommonProviderImportKey(that: this, spec: spec, data: data);


 Future<KeyPairHandle>  importKeyPair({required KeyPairSpec spec , required List<int> publicKey , required List<int> privateKey })=>RustLib.instance.api.cryptoLayerCommonProviderImportKeyPair(that: this, spec: spec, publicKey: publicKey, privateKey: privateKey);


 Future<KeyPairHandle>  importPublicKey({required KeyPairSpec spec , required List<int> publicKey })=>RustLib.instance.api.cryptoLayerCommonProviderImportPublicKey(that: this, spec: spec, publicKey: publicKey);


 Future<KeyHandle>  loadKey({required String id })=>RustLib.instance.api.cryptoLayerCommonProviderLoadKey(that: this, id: id);


 Future<KeyPairHandle>  loadKeyPair({required String id })=>RustLib.instance.api.cryptoLayerCommonProviderLoadKeyPair(that: this, id: id);


 Future<String>  providerName()=>RustLib.instance.api.cryptoLayerCommonProviderProviderName(that: this, );


 Future<DHExchange>  startEphemeralDhExchange({required KeyPairSpec spec })=>RustLib.instance.api.cryptoLayerCommonProviderStartEphemeralDhExchange(that: this, spec: spec);


            }
            @sealed class ProviderImplConfigImpl extends RustOpaque implements ProviderImplConfig {
                // Not to be used by end users
                ProviderImplConfigImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                ProviderImplConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_ProviderImplConfig,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_ProviderImplConfig,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_ProviderImplConfigPtr,
                );

                
            }
            @sealed class SecurityModuleErrorImpl extends RustOpaque implements SecurityModuleError {
                // Not to be used by end users
                SecurityModuleErrorImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                SecurityModuleErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_SecurityModuleError,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_SecurityModuleError,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_SecurityModuleErrorPtr,
                );

                
            }
            @sealed class StubProviderFactoryImpl extends RustOpaque implements StubProviderFactory {
                // Not to be used by end users
                StubProviderFactoryImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                StubProviderFactoryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_StubProviderFactory,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_StubProviderFactory,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_StubProviderFactoryPtr,
                );

                 Future<PinBoxFutureOutputBoxProviderImplAsyncTrait>  createProvider({required ProviderImplConfig implConfig })=>RustLib.instance.api.cryptoLayerStubStubProviderFactoryCreateProvider(that: this, implConfig: implConfig);


 Future<PinBoxFutureOutputProviderConfigAsyncTrait>  getCapabilities({required ProviderImplConfig implConfig })=>RustLib.instance.api.cryptoLayerStubStubProviderFactoryGetCapabilities(that: this, implConfig: implConfig);


 Future<String>  getName()=>RustLib.instance.api.cryptoLayerStubStubProviderFactoryGetName(that: this, );


            }
            @sealed class StubProviderImpl extends RustOpaque implements StubProvider {
                // Not to be used by end users
                StubProviderImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                StubProviderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_StubProvider,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_StubProvider,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_StubProviderPtr,
                );

                 Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>  createKey({required KeySpec spec })=>RustLib.instance.api.cryptoLayerStubStubProviderCreateKey(that: this, spec: spec);


 Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>  createKeyPair({required KeyPairSpec spec })=>RustLib.instance.api.cryptoLayerStubStubProviderCreateKeyPair(that: this, spec: spec);


 Future<PinBoxFutureOutputResultKeyHandleSecurityModuleErrorAsyncTrait>  loadKey({required String id })=>RustLib.instance.api.cryptoLayerStubStubProviderLoadKey(that: this, id: id);


 Future<PinBoxFutureOutputResultKeyPairHandleSecurityModuleErrorAsyncTrait>  loadKeyPair({required String id })=>RustLib.instance.api.cryptoLayerStubStubProviderLoadKeyPair(that: this, id: id);


 Future<String>  providerName()=>RustLib.instance.api.cryptoLayerStubStubProviderProviderName(that: this, );


 Future<PinBoxFutureOutputResultDhExchangeSecurityModuleErrorAsyncTrait>  startEphemeralDhExchange({required KeyPairSpec spec })=>RustLib.instance.api.cryptoLayerStubStubProviderStartEphemeralDhExchange(that: this, spec: spec);


            }
            @sealed class TImpl extends RustOpaque implements T {
                // Not to be used by end users
                TImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                TImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_T,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_T,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_TPtr,
                );

                
            }
            @sealed class TpmErrorImpl extends RustOpaque implements TpmError {
                // Not to be used by end users
                TpmErrorImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                TpmErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_TpmError,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_TpmError,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_TpmErrorPtr,
                );

                /// Provides a human-readable description of the TPM error.
///
/// This implementation ensures that errors can be easily logged or displayed to the user,
/// with a clear indication of the error's nature and origin.
 Future<String>  description()=>RustLib.instance.api.cryptoLayerTpmCoreErrorTpmErrorDescription(that: this, );


            }